{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DNN (Deep Neural Networks)\n",
    "\n",
    "<img src=\"https://cdn-images-1.medium.com/max/2000/1*Z_DnCyKt18RM0aCCrFzaIQ.png\" style=\"width: 80%\"/>\n",
    "\n",
    "ANNs have been around for quite a while: they were first introduced back in **1943** by the neurophysiologist Warren **McCulloch** and the mathematician Walter **Pitts** (see “A Logical Calculus of Ideas Immanent in Nervous Activity”).\n",
    "\n",
    "<img src=\"https://paper-attachments.dropbox.com/s_1F3ADB50AE0E9BFFE47A31C329F32861D3C6E5DDE635C337B9BB647E093C8832_1571117028252_image.png\" style=\"width: 50%\"/>\n",
    "\n",
    "<img src=\"https://paper-attachments.dropbox.com/s_1F3ADB50AE0E9BFFE47A31C329F32861D3C6E5DDE635C337B9BB647E093C8832_1571117050006_image.png\" style=\"width: 50%\"/>\n",
    "\n",
    "Most of the pictures are taken from the great book \"Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition\" by Aurélien Géron.\n",
    "\n",
    "## The Perceptron\n",
    "\n",
    "The *Perceptron* is one of the simplest ANN architectures, invented in **1957** by Frank **Rosenblatt**. It is based on a slightly different artificial neuron called a *threshold logic unit* (TLU), or sometimes a *linear threshold unit* (LTU). A Perceptron is simply composed of a single layer of TLUs, with each TLU connected to all the inputs. \n",
    "\n",
    "<img src=\"https://paper-attachments.dropbox.com/s_1F3ADB50AE0E9BFFE47A31C329F32861D3C6E5DDE635C337B9BB647E093C8832_1571117134137_image.png\" alt=\"Threshold logic unit: an artificial neuron which computes a weighted sum of its inputs then applies a step function\" style=\"width: 50%\"/>\n",
    "\n",
    "<img src=\"https://paper-attachments.dropbox.com/s_1F3ADB50AE0E9BFFE47A31C329F32861D3C6E5DDE635C337B9BB647E093C8832_1571117253013_image.png\" alt=\"Architecture of a Perceptron with two input neurons, one bias neuron, and three output neurons\" style=\"width: 50%\"/>\n",
    "\n",
    "Lets see how is a Perceptron trained.\n",
    "\n",
    "The Perceptron training algorithm proposed by **Rosenblatt** was largely inspired by ***Hebb’s rule***. In his **1949** book *The Organization of Behavior* (Wiley), Donald Hebb suggested that when a biological neuron triggers another neuron often, the connection between these two neurons grows stronger. Siegrid Löwel later summarized Hebb’s idea in the catchy phrase, “Cells that fire together, wire together”; that is, the connection weight between two neurons tends to increase when they fire simultaneously. This rule later became known as Hebb’s rule (or *Hebbian learning*).\n",
    "\n",
    "<img src=\"https://pbs.twimg.com/media/DARmL4KXYAAj0td.jpg:large\" style=\"width: 40%\"/>\n",
    "\n",
    "The decision boundary of each output neuron is linear, so Perceptrons are incapable of learning complex patterns (just like Logistic Regression classifiers). However, if the training instances are linearly separable, **Rosenblatt** demonstrated that this algorithm would converge to a solution. This is called the **Perceptron convergence theorem**.\n",
    "\n",
    "<div class=\"row\">\n",
    "  <div class=\"column\">\n",
    "    <img src=\"https://paper-attachments.dropbox.com/s_1F3ADB50AE0E9BFFE47A31C329F32861D3C6E5DDE635C337B9BB647E093C8832_1571117522486_image.png\" style=\"width: 30%\"/>\n",
    "  </div>\n",
    "  <div class=\"column\">\n",
    "    <img src=\"https://www.manhattanrarebooks.com/pictures/227.jpg?v=1354507081\" style=\"width: 30%\"/>\n",
    "  </div>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'cufflinks'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-46790fdc9119>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mcufflinks\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mcf\u001b[0m  \u001b[0;31m# nicer plots, see https://plot.ly/ipython-notebooks/cufflinks/\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdatasets\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mload_iris\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'cufflinks'"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import cufflinks as cf  # nicer plots, see https://plot.ly/ipython-notebooks/cufflinks/\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.datasets import load_iris\n",
    "from sklearn.decomposition import PCA\n",
    "cf.go_offline()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load dataset\n",
    "iris = load_iris()\n",
    "df = pd.DataFrame(iris.data, columns = iris.feature_names)\n",
    "df['class'] = iris.target_names[iris.target]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "pca = PCA(2)\n",
    "df['pc_1'], df['pc_2'] = pca.fit_transform(df.iloc[:, :4]).T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "data": [
        {
         "marker": {
          "color": "rgba(255, 153, 51, 1.0)",
          "line": {
           "width": 1.3
          },
          "opacity": 0.8,
          "size": 12,
          "symbol": "dot"
         },
         "mode": "markers",
         "name": "setosa",
         "textfont": {
          "color": "#4D5663"
         },
         "type": "scatter",
         "x": [
          -2.684125625969542,
          -2.7141416872943265,
          -2.888990569059299,
          -2.745342855641412,
          -2.7287165365545323,
          -2.2808596328444932,
          -2.8205377507406104,
          -2.6261449731466344,
          -2.886382731780555,
          -2.6727557978209555,
          -2.5069470906518574,
          -2.6127552309087245,
          -2.7861092661880194,
          -3.2238037438656546,
          -2.6447503899420304,
          -2.386039033531135,
          -2.6235278752244278,
          -2.648296706254383,
          -2.199820323617581,
          -2.5879863998787704,
          -2.3102562152425192,
          -2.543705228757158,
          -3.2159394156486125,
          -2.3027331822262083,
          -2.355754049123774,
          -2.5066689069258237,
          -2.4688200731213406,
          -2.562319906196018,
          -2.6395347153845443,
          -2.6319893872743476,
          -2.587398476689354,
          -2.4099324970021763,
          -2.6488623343499134,
          -2.598736749100589,
          -2.6369268781058004,
          -2.866241652118671,
          -2.625238049850374,
          -2.8006841154482234,
          -2.9805020437819953,
          -2.5900063139680976,
          -2.7701024260279037,
          -2.849368705043106,
          -2.9974065465949096,
          -2.4056144850974874,
          -2.209489237783681,
          -2.714451426757709,
          -2.538148258998942,
          -2.8394621676428518,
          -2.5430857498303947,
          -2.703359782335162
         ],
         "y": [
          0.31939724658510305,
          -0.1770012250647806,
          -0.14494942608555744,
          -0.3182989792519163,
          0.3267545129349198,
          0.741330449062915,
          -0.08946138452856905,
          0.16338495969832867,
          -0.5783117541867042,
          -0.11377424587411686,
          0.6450688986485742,
          0.01472993916137436,
          -0.2351120002017185,
          -0.5113945870063825,
          1.1787646364375757,
          1.3380623304006531,
          0.8106795141812578,
          0.31184914459335483,
          0.8728390389622113,
          0.513560308749277,
          0.39134593565389447,
          0.43299606327902823,
          0.13346806953852564,
          0.09870885481409927,
          -0.037281859677382734,
          -0.14601688049526776,
          0.13095148943525017,
          0.3677188574342001,
          0.31203998023528307,
          -0.19696122492431467,
          -0.20431849127413357,
          0.4109242642295731,
          0.8133638202969622,
          1.0931457594493572,
          -0.12132234786586323,
          0.06936447158008058,
          0.5993700213794241,
          0.2686437377979823,
          -0.4879583444286158,
          0.22904383682701268,
          0.26352753374425647,
          -0.940960573641197,
          -0.3419260574716102,
          0.18887142893026015,
          0.43666314163918785,
          -0.2502082041852113,
          0.5037711444614377,
          -0.22794556949382783,
          0.5794100215198895,
          0.10770608249941162
         ]
        },
        {
         "marker": {
          "color": "rgba(55, 128, 191, 1.0)",
          "line": {
           "width": 1.3
          },
          "opacity": 0.8,
          "size": 12,
          "symbol": "dot"
         },
         "mode": "markers",
         "name": "versicolor",
         "textfont": {
          "color": "#4D5663"
         },
         "type": "scatter",
         "x": [
          1.284825688858352,
          0.9324885323123182,
          1.4643023219913938,
          0.18331771995836993,
          1.088103257711666,
          0.6416690842580773,
          1.0950606626324466,
          -0.7491226698296581,
          1.0441318260534358,
          -0.008745404082897113,
          -0.507840883835327,
          0.5116985574475971,
          0.2649765081120461,
          0.9849345104708902,
          -0.17392537168176844,
          0.9278607809442472,
          0.6602837616969366,
          0.23610499331767118,
          0.9447337280198131,
          0.04522697629869929,
          1.1162831773500494,
          0.3578884179973069,
          1.2981838753589134,
          0.9217289224470369,
          0.7148533259114115,
          0.9001743731721675,
          1.3320244367220888,
          1.5578021550660706,
          0.8132906498175411,
          -0.3055837780243097,
          -0.0681264920683643,
          -0.1896224723785027,
          0.13642871155801442,
          1.380026435915511,
          0.5880064433398632,
          0.8068583125004121,
          1.2206908824443528,
          0.8150952357665997,
          0.24595767988669195,
          0.1664132171454563,
          0.46480028840377874,
          0.8908151984694491,
          0.23054802355945483,
          -0.7045317592446648,
          0.35698149470104656,
          0.3319344799450578,
          0.37621565106666993,
          0.6425760075543377,
          -0.9064698649488373,
          0.2990008418781428
         ],
         "y": [
          0.6851604704673088,
          0.3183336382626288,
          0.5042628153092042,
          -0.8279590118206325,
          0.07459067519771612,
          -0.41824687156867923,
          0.28346827006152875,
          -1.0048909611818957,
          0.2283618997883956,
          -0.7230819050048347,
          -1.2659711905263942,
          -0.10398123549904077,
          -0.5500364636804748,
          -0.12481785412635765,
          -0.2548542087025897,
          0.46717949444151063,
          -0.352969665723851,
          -0.3336107668249156,
          -0.5431455507797667,
          -0.5838343774718646,
          -0.08461685219478861,
          -0.06892503165601409,
          -0.3277873083339176,
          -0.1827377936213677,
          0.14905594436978475,
          0.3285044738343233,
          0.24444087601634362,
          0.2674954473102546,
          -0.1633503006876166,
          -0.36826218975458813,
          -0.7051721317994657,
          -0.6802867635281337,
          -0.31403243824923693,
          -0.42095428731388235,
          -0.48428741998121894,
          0.19418231471315045,
          0.40761959361100714,
          -0.3720370599095018,
          -0.2685243966220153,
          -0.6819267248636272,
          -0.6707115445117209,
          -0.03446444436826912,
          -0.40438584800732535,
          -1.0122482275317148,
          -0.504910093337109,
          -0.21265468378117022,
          -0.29321892925141935,
          0.01773819011241614,
          -0.7560933665990144,
          -0.3488978064503363
         ]
        },
        {
         "marker": {
          "color": "rgba(50, 171, 96, 1.0)",
          "line": {
           "width": 1.3
          },
          "opacity": 0.8,
          "size": 12,
          "symbol": "dot"
         },
         "mode": "markers",
         "name": "virginica",
         "textfont": {
          "color": "#4D5663"
         },
         "type": "scatter",
         "x": [
          2.531192727803628,
          1.4152358767039022,
          2.61667601599569,
          1.9715310530434356,
          2.3500059200446404,
          3.3970387360532595,
          0.521232243909773,
          2.9325870689936897,
          2.3212288165733783,
          2.9167509667860734,
          1.6617741536365316,
          1.803401952965091,
          2.1655917960801454,
          1.3461635794584512,
          1.5859282238732209,
          1.904456374793427,
          1.9496890593990694,
          3.4870553642902804,
          3.7956454220728846,
          1.300791712637657,
          2.427817913066046,
          1.19900110546556,
          3.4999200389245386,
          1.3887661316914652,
          2.275430503872205,
          2.614090473810832,
          1.2585081605114878,
          1.2911320591150208,
          2.123608722773895,
          2.3880030160034686,
          2.8416727781038715,
          3.230673661432094,
          2.15943764248905,
          1.4441612423295096,
          1.7812948100451123,
          3.076499931687188,
          2.144243314302082,
          1.9050981488140755,
          1.1693263393414999,
          2.107611143257242,
          2.3141547052356,
          1.9222678009026013,
          1.4152358767039022,
          2.5630133750774764,
          2.4187461827328254,
          1.944109794546968,
          1.527166614814517,
          1.7643457170444292,
          1.9009416142184234,
          1.3901888619479135
         ],
         "y": [
          -0.009849109498802801,
          -0.5749163475464901,
          0.3439031513417341,
          -0.17972790435224595,
          -0.0402609471425316,
          0.5508366730280554,
          -1.1927587270006463,
          0.3555000029774963,
          -0.24383150231069087,
          0.7827919488152781,
          0.2422284077550667,
          -0.21563761733355577,
          0.21627558507402442,
          -0.7768183473443404,
          -0.5396407140267195,
          0.11925069209197217,
          0.041943259663211024,
          1.1757393297134293,
          0.2573229734204794,
          -0.7611496364350637,
          0.3781960126170504,
          -0.6060915277579313,
          0.46067409891189504,
          -0.20439932735215124,
          0.334990605821677,
          0.5609013551230777,
          -0.17970479472274706,
          -0.1166686511740119,
          -0.2097294766773032,
          0.46463980470873645,
          0.3752691671951033,
          1.3741650867930475,
          -0.21727757866904956,
          -0.143413410457581,
          -0.499901681078137,
          0.6880856775711758,
          0.1400642010897892,
          0.04930052601302983,
          -0.16499026202311012,
          0.3722878719607974,
          0.18365127916901844,
          0.4092034668160619,
          -0.5749163475464901,
          0.2778626029291944,
          0.3047981978546915,
          0.18753230280060482,
          -0.3753169825804888,
          0.07885885451847535,
          0.11662795851202283,
          -0.28266093799055114
         ]
        }
       ],
       "layout": {
        "legend": {
         "bgcolor": "#F5F6F9",
         "font": {
          "color": "#4D5663"
         }
        },
        "paper_bgcolor": "#F5F6F9",
        "plot_bgcolor": "#F5F6F9",
        "titlefont": {
         "color": "#4D5663"
        },
        "xaxis1": {
         "gridcolor": "#E1E5ED",
         "showgrid": true,
         "tickfont": {
          "color": "#4D5663"
         },
         "title": "",
         "titlefont": {
          "color": "#4D5663"
         },
         "zerolinecolor": "#E1E5ED"
        },
        "yaxis1": {
         "gridcolor": "#E1E5ED",
         "showgrid": true,
         "tickfont": {
          "color": "#4D5663"
         },
         "title": "",
         "titlefont": {
          "color": "#4D5663"
         },
         "zerolinecolor": "#E1E5ED"
        }
       }
      },
      "text/html": [
       "<div id=\"d8be87b7-bca4-4d18-b622-73393e85188d\" style=\"height: 525px; width: 100%;\" class=\"plotly-graph-div\"></div><script type=\"text/javascript\">require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {};window.PLOTLYENV.BASE_URL=\"https://plot.ly\";Plotly.newPlot(\"d8be87b7-bca4-4d18-b622-73393e85188d\", [{\"type\": \"scatter\", \"x\": [-2.684125625969542, -2.7141416872943265, -2.888990569059299, -2.745342855641412, -2.7287165365545323, -2.2808596328444932, -2.8205377507406104, -2.6261449731466344, -2.886382731780555, -2.6727557978209555, -2.5069470906518574, -2.6127552309087245, -2.7861092661880194, -3.2238037438656546, -2.6447503899420304, -2.386039033531135, -2.6235278752244278, -2.648296706254383, -2.199820323617581, -2.5879863998787704, -2.3102562152425192, -2.543705228757158, -3.2159394156486125, -2.3027331822262083, -2.355754049123774, -2.5066689069258237, -2.4688200731213406, -2.562319906196018, -2.6395347153845443, -2.6319893872743476, -2.587398476689354, -2.4099324970021763, -2.6488623343499134, -2.598736749100589, -2.6369268781058004, -2.866241652118671, -2.625238049850374, -2.8006841154482234, -2.9805020437819953, -2.5900063139680976, -2.7701024260279037, -2.849368705043106, -2.9974065465949096, -2.4056144850974874, -2.209489237783681, -2.714451426757709, -2.538148258998942, -2.8394621676428518, -2.5430857498303947, -2.703359782335162], \"y\": [0.31939724658510305, -0.1770012250647806, -0.14494942608555744, -0.3182989792519163, 0.3267545129349198, 0.741330449062915, -0.08946138452856905, 0.16338495969832867, -0.5783117541867042, -0.11377424587411686, 0.6450688986485742, 0.01472993916137436, -0.2351120002017185, -0.5113945870063825, 1.1787646364375757, 1.3380623304006531, 0.8106795141812578, 0.31184914459335483, 0.8728390389622113, 0.513560308749277, 0.39134593565389447, 0.43299606327902823, 0.13346806953852564, 0.09870885481409927, -0.037281859677382734, -0.14601688049526776, 0.13095148943525017, 0.3677188574342001, 0.31203998023528307, -0.19696122492431467, -0.20431849127413357, 0.4109242642295731, 0.8133638202969622, 1.0931457594493572, -0.12132234786586323, 0.06936447158008058, 0.5993700213794241, 0.2686437377979823, -0.4879583444286158, 0.22904383682701268, 0.26352753374425647, -0.940960573641197, -0.3419260574716102, 0.18887142893026015, 0.43666314163918785, -0.2502082041852113, 0.5037711444614377, -0.22794556949382783, 0.5794100215198895, 0.10770608249941162], \"mode\": \"markers\", \"name\": \"setosa\", \"marker\": {\"color\": \"rgba(255, 153, 51, 1.0)\", \"symbol\": \"dot\", \"size\": 12, \"opacity\": 0.8, \"line\": {\"width\": 1.3}}, \"textfont\": {\"color\": \"#4D5663\"}}, {\"type\": \"scatter\", \"x\": [1.284825688858352, 0.9324885323123182, 1.4643023219913938, 0.18331771995836993, 1.088103257711666, 0.6416690842580773, 1.0950606626324466, -0.7491226698296581, 1.0441318260534358, -0.008745404082897113, -0.507840883835327, 0.5116985574475971, 0.2649765081120461, 0.9849345104708902, -0.17392537168176844, 0.9278607809442472, 0.6602837616969366, 0.23610499331767118, 0.9447337280198131, 0.04522697629869929, 1.1162831773500494, 0.3578884179973069, 1.2981838753589134, 0.9217289224470369, 0.7148533259114115, 0.9001743731721675, 1.3320244367220888, 1.5578021550660706, 0.8132906498175411, -0.3055837780243097, -0.0681264920683643, -0.1896224723785027, 0.13642871155801442, 1.380026435915511, 0.5880064433398632, 0.8068583125004121, 1.2206908824443528, 0.8150952357665997, 0.24595767988669195, 0.1664132171454563, 0.46480028840377874, 0.8908151984694491, 0.23054802355945483, -0.7045317592446648, 0.35698149470104656, 0.3319344799450578, 0.37621565106666993, 0.6425760075543377, -0.9064698649488373, 0.2990008418781428], \"y\": [0.6851604704673088, 0.3183336382626288, 0.5042628153092042, -0.8279590118206325, 0.07459067519771612, -0.41824687156867923, 0.28346827006152875, -1.0048909611818957, 0.2283618997883956, -0.7230819050048347, -1.2659711905263942, -0.10398123549904077, -0.5500364636804748, -0.12481785412635765, -0.2548542087025897, 0.46717949444151063, -0.352969665723851, -0.3336107668249156, -0.5431455507797667, -0.5838343774718646, -0.08461685219478861, -0.06892503165601409, -0.3277873083339176, -0.1827377936213677, 0.14905594436978475, 0.3285044738343233, 0.24444087601634362, 0.2674954473102546, -0.1633503006876166, -0.36826218975458813, -0.7051721317994657, -0.6802867635281337, -0.31403243824923693, -0.42095428731388235, -0.48428741998121894, 0.19418231471315045, 0.40761959361100714, -0.3720370599095018, -0.2685243966220153, -0.6819267248636272, -0.6707115445117209, -0.03446444436826912, -0.40438584800732535, -1.0122482275317148, -0.504910093337109, -0.21265468378117022, -0.29321892925141935, 0.01773819011241614, -0.7560933665990144, -0.3488978064503363], \"mode\": \"markers\", \"name\": \"versicolor\", \"marker\": {\"color\": \"rgba(55, 128, 191, 1.0)\", \"symbol\": \"dot\", \"size\": 12, \"opacity\": 0.8, \"line\": {\"width\": 1.3}}, \"textfont\": {\"color\": \"#4D5663\"}}, {\"type\": \"scatter\", \"x\": [2.531192727803628, 1.4152358767039022, 2.61667601599569, 1.9715310530434356, 2.3500059200446404, 3.3970387360532595, 0.521232243909773, 2.9325870689936897, 2.3212288165733783, 2.9167509667860734, 1.6617741536365316, 1.803401952965091, 2.1655917960801454, 1.3461635794584512, 1.5859282238732209, 1.904456374793427, 1.9496890593990694, 3.4870553642902804, 3.7956454220728846, 1.300791712637657, 2.427817913066046, 1.19900110546556, 3.4999200389245386, 1.3887661316914652, 2.275430503872205, 2.614090473810832, 1.2585081605114878, 1.2911320591150208, 2.123608722773895, 2.3880030160034686, 2.8416727781038715, 3.230673661432094, 2.15943764248905, 1.4441612423295096, 1.7812948100451123, 3.076499931687188, 2.144243314302082, 1.9050981488140755, 1.1693263393414999, 2.107611143257242, 2.3141547052356, 1.9222678009026013, 1.4152358767039022, 2.5630133750774764, 2.4187461827328254, 1.944109794546968, 1.527166614814517, 1.7643457170444292, 1.9009416142184234, 1.3901888619479135], \"y\": [-0.009849109498802801, -0.5749163475464901, 0.3439031513417341, -0.17972790435224595, -0.0402609471425316, 0.5508366730280554, -1.1927587270006463, 0.3555000029774963, -0.24383150231069087, 0.7827919488152781, 0.2422284077550667, -0.21563761733355577, 0.21627558507402442, -0.7768183473443404, -0.5396407140267195, 0.11925069209197217, 0.041943259663211024, 1.1757393297134293, 0.2573229734204794, -0.7611496364350637, 0.3781960126170504, -0.6060915277579313, 0.46067409891189504, -0.20439932735215124, 0.334990605821677, 0.5609013551230777, -0.17970479472274706, -0.1166686511740119, -0.2097294766773032, 0.46463980470873645, 0.3752691671951033, 1.3741650867930475, -0.21727757866904956, -0.143413410457581, -0.499901681078137, 0.6880856775711758, 0.1400642010897892, 0.04930052601302983, -0.16499026202311012, 0.3722878719607974, 0.18365127916901844, 0.4092034668160619, -0.5749163475464901, 0.2778626029291944, 0.3047981978546915, 0.18753230280060482, -0.3753169825804888, 0.07885885451847535, 0.11662795851202283, -0.28266093799055114], \"mode\": \"markers\", \"name\": \"virginica\", \"marker\": {\"color\": \"rgba(50, 171, 96, 1.0)\", \"symbol\": \"dot\", \"size\": 12, \"opacity\": 0.8, \"line\": {\"width\": 1.3}}, \"textfont\": {\"color\": \"#4D5663\"}}], {\"legend\": {\"bgcolor\": \"#F5F6F9\", \"font\": {\"color\": \"#4D5663\"}}, \"paper_bgcolor\": \"#F5F6F9\", \"plot_bgcolor\": \"#F5F6F9\", \"yaxis1\": {\"tickfont\": {\"color\": \"#4D5663\"}, \"gridcolor\": \"#E1E5ED\", \"titlefont\": {\"color\": \"#4D5663\"}, \"zerolinecolor\": \"#E1E5ED\", \"showgrid\": true, \"title\": \"\"}, \"xaxis1\": {\"tickfont\": {\"color\": \"#4D5663\"}, \"gridcolor\": \"#E1E5ED\", \"titlefont\": {\"color\": \"#4D5663\"}, \"zerolinecolor\": \"#E1E5ED\", \"showgrid\": true, \"title\": \"\"}, \"titlefont\": {\"color\": \"#4D5663\"}}, {\"showLink\": true, \"linkText\": \"Export to plot.ly\"})});</script>"
      ],
      "text/vnd.plotly.v1+html": [
       "<div id=\"d8be87b7-bca4-4d18-b622-73393e85188d\" style=\"height: 525px; width: 100%;\" class=\"plotly-graph-div\"></div><script type=\"text/javascript\">require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {};window.PLOTLYENV.BASE_URL=\"https://plot.ly\";Plotly.newPlot(\"d8be87b7-bca4-4d18-b622-73393e85188d\", [{\"type\": \"scatter\", \"x\": [-2.684125625969542, -2.7141416872943265, -2.888990569059299, -2.745342855641412, -2.7287165365545323, -2.2808596328444932, -2.8205377507406104, -2.6261449731466344, -2.886382731780555, -2.6727557978209555, -2.5069470906518574, -2.6127552309087245, -2.7861092661880194, -3.2238037438656546, -2.6447503899420304, -2.386039033531135, -2.6235278752244278, -2.648296706254383, -2.199820323617581, -2.5879863998787704, -2.3102562152425192, -2.543705228757158, -3.2159394156486125, -2.3027331822262083, -2.355754049123774, -2.5066689069258237, -2.4688200731213406, -2.562319906196018, -2.6395347153845443, -2.6319893872743476, -2.587398476689354, -2.4099324970021763, -2.6488623343499134, -2.598736749100589, -2.6369268781058004, -2.866241652118671, -2.625238049850374, -2.8006841154482234, -2.9805020437819953, -2.5900063139680976, -2.7701024260279037, -2.849368705043106, -2.9974065465949096, -2.4056144850974874, -2.209489237783681, -2.714451426757709, -2.538148258998942, -2.8394621676428518, -2.5430857498303947, -2.703359782335162], \"y\": [0.31939724658510305, -0.1770012250647806, -0.14494942608555744, -0.3182989792519163, 0.3267545129349198, 0.741330449062915, -0.08946138452856905, 0.16338495969832867, -0.5783117541867042, -0.11377424587411686, 0.6450688986485742, 0.01472993916137436, -0.2351120002017185, -0.5113945870063825, 1.1787646364375757, 1.3380623304006531, 0.8106795141812578, 0.31184914459335483, 0.8728390389622113, 0.513560308749277, 0.39134593565389447, 0.43299606327902823, 0.13346806953852564, 0.09870885481409927, -0.037281859677382734, -0.14601688049526776, 0.13095148943525017, 0.3677188574342001, 0.31203998023528307, -0.19696122492431467, -0.20431849127413357, 0.4109242642295731, 0.8133638202969622, 1.0931457594493572, -0.12132234786586323, 0.06936447158008058, 0.5993700213794241, 0.2686437377979823, -0.4879583444286158, 0.22904383682701268, 0.26352753374425647, -0.940960573641197, -0.3419260574716102, 0.18887142893026015, 0.43666314163918785, -0.2502082041852113, 0.5037711444614377, -0.22794556949382783, 0.5794100215198895, 0.10770608249941162], \"mode\": \"markers\", \"name\": \"setosa\", \"marker\": {\"color\": \"rgba(255, 153, 51, 1.0)\", \"symbol\": \"dot\", \"size\": 12, \"opacity\": 0.8, \"line\": {\"width\": 1.3}}, \"textfont\": {\"color\": \"#4D5663\"}}, {\"type\": \"scatter\", \"x\": [1.284825688858352, 0.9324885323123182, 1.4643023219913938, 0.18331771995836993, 1.088103257711666, 0.6416690842580773, 1.0950606626324466, -0.7491226698296581, 1.0441318260534358, -0.008745404082897113, -0.507840883835327, 0.5116985574475971, 0.2649765081120461, 0.9849345104708902, -0.17392537168176844, 0.9278607809442472, 0.6602837616969366, 0.23610499331767118, 0.9447337280198131, 0.04522697629869929, 1.1162831773500494, 0.3578884179973069, 1.2981838753589134, 0.9217289224470369, 0.7148533259114115, 0.9001743731721675, 1.3320244367220888, 1.5578021550660706, 0.8132906498175411, -0.3055837780243097, -0.0681264920683643, -0.1896224723785027, 0.13642871155801442, 1.380026435915511, 0.5880064433398632, 0.8068583125004121, 1.2206908824443528, 0.8150952357665997, 0.24595767988669195, 0.1664132171454563, 0.46480028840377874, 0.8908151984694491, 0.23054802355945483, -0.7045317592446648, 0.35698149470104656, 0.3319344799450578, 0.37621565106666993, 0.6425760075543377, -0.9064698649488373, 0.2990008418781428], \"y\": [0.6851604704673088, 0.3183336382626288, 0.5042628153092042, -0.8279590118206325, 0.07459067519771612, -0.41824687156867923, 0.28346827006152875, -1.0048909611818957, 0.2283618997883956, -0.7230819050048347, -1.2659711905263942, -0.10398123549904077, -0.5500364636804748, -0.12481785412635765, -0.2548542087025897, 0.46717949444151063, -0.352969665723851, -0.3336107668249156, -0.5431455507797667, -0.5838343774718646, -0.08461685219478861, -0.06892503165601409, -0.3277873083339176, -0.1827377936213677, 0.14905594436978475, 0.3285044738343233, 0.24444087601634362, 0.2674954473102546, -0.1633503006876166, -0.36826218975458813, -0.7051721317994657, -0.6802867635281337, -0.31403243824923693, -0.42095428731388235, -0.48428741998121894, 0.19418231471315045, 0.40761959361100714, -0.3720370599095018, -0.2685243966220153, -0.6819267248636272, -0.6707115445117209, -0.03446444436826912, -0.40438584800732535, -1.0122482275317148, -0.504910093337109, -0.21265468378117022, -0.29321892925141935, 0.01773819011241614, -0.7560933665990144, -0.3488978064503363], \"mode\": \"markers\", \"name\": \"versicolor\", \"marker\": {\"color\": \"rgba(55, 128, 191, 1.0)\", \"symbol\": \"dot\", \"size\": 12, \"opacity\": 0.8, \"line\": {\"width\": 1.3}}, \"textfont\": {\"color\": \"#4D5663\"}}, {\"type\": \"scatter\", \"x\": [2.531192727803628, 1.4152358767039022, 2.61667601599569, 1.9715310530434356, 2.3500059200446404, 3.3970387360532595, 0.521232243909773, 2.9325870689936897, 2.3212288165733783, 2.9167509667860734, 1.6617741536365316, 1.803401952965091, 2.1655917960801454, 1.3461635794584512, 1.5859282238732209, 1.904456374793427, 1.9496890593990694, 3.4870553642902804, 3.7956454220728846, 1.300791712637657, 2.427817913066046, 1.19900110546556, 3.4999200389245386, 1.3887661316914652, 2.275430503872205, 2.614090473810832, 1.2585081605114878, 1.2911320591150208, 2.123608722773895, 2.3880030160034686, 2.8416727781038715, 3.230673661432094, 2.15943764248905, 1.4441612423295096, 1.7812948100451123, 3.076499931687188, 2.144243314302082, 1.9050981488140755, 1.1693263393414999, 2.107611143257242, 2.3141547052356, 1.9222678009026013, 1.4152358767039022, 2.5630133750774764, 2.4187461827328254, 1.944109794546968, 1.527166614814517, 1.7643457170444292, 1.9009416142184234, 1.3901888619479135], \"y\": [-0.009849109498802801, -0.5749163475464901, 0.3439031513417341, -0.17972790435224595, -0.0402609471425316, 0.5508366730280554, -1.1927587270006463, 0.3555000029774963, -0.24383150231069087, 0.7827919488152781, 0.2422284077550667, -0.21563761733355577, 0.21627558507402442, -0.7768183473443404, -0.5396407140267195, 0.11925069209197217, 0.041943259663211024, 1.1757393297134293, 0.2573229734204794, -0.7611496364350637, 0.3781960126170504, -0.6060915277579313, 0.46067409891189504, -0.20439932735215124, 0.334990605821677, 0.5609013551230777, -0.17970479472274706, -0.1166686511740119, -0.2097294766773032, 0.46463980470873645, 0.3752691671951033, 1.3741650867930475, -0.21727757866904956, -0.143413410457581, -0.499901681078137, 0.6880856775711758, 0.1400642010897892, 0.04930052601302983, -0.16499026202311012, 0.3722878719607974, 0.18365127916901844, 0.4092034668160619, -0.5749163475464901, 0.2778626029291944, 0.3047981978546915, 0.18753230280060482, -0.3753169825804888, 0.07885885451847535, 0.11662795851202283, -0.28266093799055114], \"mode\": \"markers\", \"name\": \"virginica\", \"marker\": {\"color\": \"rgba(50, 171, 96, 1.0)\", \"symbol\": \"dot\", \"size\": 12, \"opacity\": 0.8, \"line\": {\"width\": 1.3}}, \"textfont\": {\"color\": \"#4D5663\"}}], {\"legend\": {\"bgcolor\": \"#F5F6F9\", \"font\": {\"color\": \"#4D5663\"}}, \"paper_bgcolor\": \"#F5F6F9\", \"plot_bgcolor\": \"#F5F6F9\", \"yaxis1\": {\"tickfont\": {\"color\": \"#4D5663\"}, \"gridcolor\": \"#E1E5ED\", \"titlefont\": {\"color\": \"#4D5663\"}, \"zerolinecolor\": \"#E1E5ED\", \"showgrid\": true, \"title\": \"\"}, \"xaxis1\": {\"tickfont\": {\"color\": \"#4D5663\"}, \"gridcolor\": \"#E1E5ED\", \"titlefont\": {\"color\": \"#4D5663\"}, \"zerolinecolor\": \"#E1E5ED\", \"showgrid\": true, \"title\": \"\"}, \"titlefont\": {\"color\": \"#4D5663\"}}, {\"showLink\": true, \"linkText\": \"Export to plot.ly\"})});</script>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.iplot(x='pc_1', y='pc_2', categories='class')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will work only with one class for now."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "CLASS = 'versicolor'\n",
    "\n",
    "# Prepare data for 2 class test\n",
    "y = (df['class'] == CLASS).astype('int').values\n",
    "X = df.iloc[:, :4]\n",
    "\n",
    "# Apply standart scaler\n",
    "X = ((X - X.mean()) / X.std()).values\n",
    "\n",
    "# Add ones for intercept\n",
    "X = np.hstack([X, np.ones((X.shape[0], 1))])\n",
    "\n",
    "# Make mask for tain/test set\n",
    "np.random.seed(42)\n",
    "mask = np.random.random(X.shape[0]) < 0.7\n",
    "\n",
    "N, M = X.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Perceptron for 2 class case\n",
    "\n",
    "We will produce following perceptron from scratch\n",
    "\n",
    "<img src=\"https://miro.medium.com/max/2870/1*n6sJ4yZQzwKL9wnF5wnVNg.png\" style=\"width: 60%\"/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hit rate (train set) - 63.81%, Hit rate (test set) - 66.67%\n"
     ]
    }
   ],
   "source": [
    "epochs = 100\n",
    "learning_rate = 0.01\n",
    "\n",
    "# Initial weights between 0 and 1\n",
    "np.random.seed(42)\n",
    "W = np.random.random(M)\n",
    "\n",
    "for _ in range(epochs):\n",
    "    # Train only on train set\n",
    "    for features, label in zip(X[mask], y[mask]):\n",
    "        pred = 0 if np.dot(features, W) > 0 else 1     # step function\n",
    "        W += learning_rate * (label - pred) * features\n",
    "\n",
    "pred_train = np.dot(X[mask], W) > 0\n",
    "pred_test = np.dot(X[~mask], W) > 0\n",
    "print('Hit rate (train set) - {0:.02%}, Hit rate (test set) - {1:.02%}'.format(\n",
    "    (pred_train == y[mask]).mean(), (pred_test == y[~mask]).mean()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Interestingly Alexey Grigorevich Ivakhnenko in 1965 introduced first deep neural network, but it was forgotten...\n",
    "\n",
    "<img src=\"https://paper-attachments.dropbox.com/s_1F3ADB50AE0E9BFFE47A31C329F32861D3C6E5DDE635C337B9BB647E093C8832_1571319956543_image.png\" alt=\"First known deep network\" style=\"width: 50%\"/>\n",
    "\n",
    "## Beginning of first AI winter\n",
    "\n",
    "In their **1969** monograph *Perceptrons*, Marvin Minsky and Seymour **Papert** highlighted a number of serious weaknesses of Perceptrons—in particular, the fact that they are incapable of solving some trivial problems (e.g., the *Exclusive OR* (XOR) classification problem.\n",
    "It turns out that some of the limitations of Perceptrons can be eliminated by stacking multiple Perceptrons!\n",
    "\n",
    "<img src=\"https://paper-attachments.dropbox.com/s_1F3ADB50AE0E9BFFE47A31C329F32861D3C6E5DDE635C337B9BB647E093C8832_1571117686838_image.png\"  style=\"width: 50%\"/>\n",
    "\n",
    "But, we have no idea how to train it yet…\n",
    "\n",
    "<img src=\"https://miro.medium.com/max/2101/1*mWYZanOv3QUafz0nnhbEWw.png\"  style=\"width: 50%\"/>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Backpropagation\n",
    "\n",
    "When an ANN contains a deep stack of hidden layers, it is called a ***deep neural network*** **(DNN)**.\n",
    "\n",
    "<img src=\"https://paper-attachments.dropbox.com/s_1F3ADB50AE0E9BFFE47A31C329F32861D3C6E5DDE635C337B9BB647E093C8832_1571117766740_image.png\" alt=\"Architecture of a Multilayer Perceptron\" style=\"width: 50%\"/>\n",
    "\n",
    "For many years researchers struggled to find a way to train MLPs, without success. But in **1986**, David **Rumelhart**, Geoffrey **Hinton**, and Ronald **Williams** published a groundbreaking paper (“Learning Internal Representations by Error Propagation”) that introduced the **backpropagation** training algorithm, which is still used today.\n",
    "\n",
    "Actually backpropagation was known prior to 1986 (Paul Werbos, 1975)\n",
    "\n",
    "<img src=\"https://paper-attachments.dropbox.com/s_1F3ADB50AE0E9BFFE47A31C329F32861D3C6E5DDE635C337B9BB647E093C8832_1571320041201_image.png\" alt=\"Paul Werbos, 1975\" style=\"width: 50%\"/>\n",
    "\n",
    "In short, it is Gradient Descent using an efficient technique for computing the gradients automatically: in just **two passes** through the network (one **forward**, one **backward**), the backpropagation algorithm is able to compute the gradient of the network’s error with regard to every single model parameter.\n",
    "\n",
    "<img src=\"https://miro.medium.com/max/3040/1*q1M7LGiDTirwU-4LcFq7_Q.png\" style=\"width: 50%\"/>\n",
    "\n",
    "Automatically computing gradients is called *automatic differentiation*, or *autodiff*. There are various autodiff techniques, with different pros and cons. The one used by backpropagation is called *reverse-mode autodiff*.\n",
    "\n",
    "### Two layer NN for 2 class case\n",
    "\n",
    "<img src=\"https://miro.medium.com/max/1000/1*sX6T0Y4aa3ARh7IBS_sdqw.png\" style=\"width: 40%\"/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "sigmoid = lambda x: 1 / (1 + np.exp(-x))\n",
    "diff = lambda x: x * (1 - x)\n",
    "\n",
    "hidden = 4\n",
    "learning_rate = 0.01\n",
    "epochs = 500\n",
    "\n",
    "# Initial weights between 0 and 1\n",
    "np.random.seed(42)\n",
    "W_0 = np.random.uniform(size=(M, hidden))\n",
    "W_1 = np.random.uniform(size=(hidden, 1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Following code implements **back propagation** using gradient descent.\n",
    "\n",
    "<img src=\"https://kratzert.github.io/images/bn_backpass/chainrule_example.PNG\" style=\"width: 80%\"/>\n",
    "\n",
    "For extensive chain rule back propagation explanation see [this blog post](https://kratzert.github.io/2016/02/12/understanding-the-gradient-flow-through-the-batch-normalization-layer.html)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hit rate (train set) - 80.00%, Hit rate (test set) - 71.11%\n"
     ]
    }
   ],
   "source": [
    "for _ in range(epochs):\n",
    "    # Forward pass (make prediction)\n",
    "    L_1 = sigmoid(X[mask].dot(W_0))\n",
    "    L_2 = sigmoid(L_1.dot(W_1))\n",
    "    # Backward pass (propagate diff)\n",
    "    diff_2 = (y[mask, np.newaxis] - L_2) * diff(L_2)\n",
    "    diff_1 = np.dot(diff_2, W_1.T) * diff(L_1)\n",
    "    W_1 += learning_rate * np.dot(L_1.T, diff_2)\n",
    "    W_0 += learning_rate * np.dot(X[mask].T, diff_1)\n",
    "\n",
    "pred_train = (sigmoid(sigmoid(X[mask].dot(W_0)).dot(W_1)) > 0.5).flatten()\n",
    "pred_test = (sigmoid(sigmoid(X[~mask].dot(W_0)).dot(W_1)) > 0.5).flatten()\n",
    "print('Hit rate (train set) - {0:.02%}, Hit rate (test set) - {1:.02%}'.format(\n",
    "    (pred_train == y[mask]).mean(), (pred_test == y[~mask]).mean()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Keras\n",
    "\n",
    "From now on we will use keras to create our models. We will use relu activation\n",
    "\n",
    "<img src=\"https://miro.medium.com/max/357/1*oePAhrm74RNnNEolprmTaQ.png\" style=\"width: 30%\"/>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow.keras as keras\n",
    "from tensorflow.keras.layers import Dense, Input\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense_26 (Dense)             (None, 4)                 24        \n",
      "_________________________________________________________________\n",
      "dense_27 (Dense)             (None, 1)                 5         \n",
      "=================================================================\n",
      "Total params: 29\n",
      "Trainable params: 29\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "Epoch 1/100\n",
      "105/105 [==============================] - 1s 6ms/step - loss: 0.8314\n",
      "Epoch 2/100\n",
      "105/105 [==============================] - 0s 83us/step - loss: 0.7628\n",
      "Epoch 3/100\n",
      "105/105 [==============================] - 0s 83us/step - loss: 0.7001\n",
      "Epoch 4/100\n",
      "105/105 [==============================] - 0s 95us/step - loss: 0.6404\n",
      "Epoch 5/100\n",
      "105/105 [==============================] - 0s 90us/step - loss: 0.5924\n",
      "Epoch 6/100\n",
      "105/105 [==============================] - 0s 92us/step - loss: 0.5480\n",
      "Epoch 7/100\n",
      "105/105 [==============================] - 0s 124us/step - loss: 0.5121\n",
      "Epoch 8/100\n",
      "105/105 [==============================] - 0s 161us/step - loss: 0.4778\n",
      "Epoch 9/100\n",
      "105/105 [==============================] - 0s 79us/step - loss: 0.4506\n",
      "Epoch 10/100\n",
      "105/105 [==============================] - 0s 126us/step - loss: 0.4271\n",
      "Epoch 11/100\n",
      "105/105 [==============================] - 0s 104us/step - loss: 0.4043\n",
      "Epoch 12/100\n",
      "105/105 [==============================] - 0s 75us/step - loss: 0.3824\n",
      "Epoch 13/100\n",
      "105/105 [==============================] - 0s 129us/step - loss: 0.3630\n",
      "Epoch 14/100\n",
      "105/105 [==============================] - 0s 126us/step - loss: 0.3446\n",
      "Epoch 15/100\n",
      "105/105 [==============================] - 0s 122us/step - loss: 0.3281\n",
      "Epoch 16/100\n",
      "105/105 [==============================] - 0s 114us/step - loss: 0.3137\n",
      "Epoch 17/100\n",
      "105/105 [==============================] - 0s 91us/step - loss: 0.3030\n",
      "Epoch 18/100\n",
      "105/105 [==============================] - 0s 104us/step - loss: 0.2920\n",
      "Epoch 19/100\n",
      "105/105 [==============================] - 0s 130us/step - loss: 0.2826\n",
      "Epoch 20/100\n",
      "105/105 [==============================] - 0s 130us/step - loss: 0.2737\n",
      "Epoch 21/100\n",
      "105/105 [==============================] - 0s 133us/step - loss: 0.2669\n",
      "Epoch 22/100\n",
      "105/105 [==============================] - 0s 134us/step - loss: 0.2603\n",
      "Epoch 23/100\n",
      "105/105 [==============================] - 0s 174us/step - loss: 0.2537\n",
      "Epoch 24/100\n",
      "105/105 [==============================] - 0s 160us/step - loss: 0.2478\n",
      "Epoch 25/100\n",
      "105/105 [==============================] - 0s 194us/step - loss: 0.2408\n",
      "Epoch 26/100\n",
      "105/105 [==============================] - 0s 218us/step - loss: 0.2347\n",
      "Epoch 27/100\n",
      "105/105 [==============================] - 0s 163us/step - loss: 0.2293\n",
      "Epoch 28/100\n",
      "105/105 [==============================] - 0s 153us/step - loss: 0.2238\n",
      "Epoch 29/100\n",
      "105/105 [==============================] - 0s 157us/step - loss: 0.2187\n",
      "Epoch 30/100\n",
      "105/105 [==============================] - 0s 183us/step - loss: 0.2125\n",
      "Epoch 31/100\n",
      "105/105 [==============================] - 0s 202us/step - loss: 0.2065\n",
      "Epoch 32/100\n",
      "105/105 [==============================] - 0s 181us/step - loss: 0.2010\n",
      "Epoch 33/100\n",
      "105/105 [==============================] - 0s 175us/step - loss: 0.1959\n",
      "Epoch 34/100\n",
      "105/105 [==============================] - 0s 173us/step - loss: 0.1905\n",
      "Epoch 35/100\n",
      "105/105 [==============================] - 0s 147us/step - loss: 0.1848\n",
      "Epoch 36/100\n",
      "105/105 [==============================] - 0s 165us/step - loss: 0.1796\n",
      "Epoch 37/100\n",
      "105/105 [==============================] - 0s 168us/step - loss: 0.1749\n",
      "Epoch 38/100\n",
      "105/105 [==============================] - 0s 211us/step - loss: 0.1697\n",
      "Epoch 39/100\n",
      "105/105 [==============================] - 0s 173us/step - loss: 0.1646\n",
      "Epoch 40/100\n",
      "105/105 [==============================] - 0s 181us/step - loss: 0.1598\n",
      "Epoch 41/100\n",
      "105/105 [==============================] - 0s 189us/step - loss: 0.1546\n",
      "Epoch 42/100\n",
      "105/105 [==============================] - 0s 176us/step - loss: 0.1500\n",
      "Epoch 43/100\n",
      "105/105 [==============================] - 0s 159us/step - loss: 0.1461\n",
      "Epoch 44/100\n",
      "105/105 [==============================] - 0s 125us/step - loss: 0.1424\n",
      "Epoch 45/100\n",
      "105/105 [==============================] - 0s 177us/step - loss: 0.1379\n",
      "Epoch 46/100\n",
      "105/105 [==============================] - 0s 169us/step - loss: 0.1347\n",
      "Epoch 47/100\n",
      "105/105 [==============================] - 0s 140us/step - loss: 0.1312\n",
      "Epoch 48/100\n",
      "105/105 [==============================] - 0s 145us/step - loss: 0.1293\n",
      "Epoch 49/100\n",
      "105/105 [==============================] - 0s 159us/step - loss: 0.1269\n",
      "Epoch 50/100\n",
      "105/105 [==============================] - 0s 147us/step - loss: 0.1234\n",
      "Epoch 51/100\n",
      "105/105 [==============================] - 0s 106us/step - loss: 0.1191\n",
      "Epoch 52/100\n",
      "105/105 [==============================] - 0s 117us/step - loss: 0.1168\n",
      "Epoch 53/100\n",
      "105/105 [==============================] - 0s 71us/step - loss: 0.1144\n",
      "Epoch 54/100\n",
      "105/105 [==============================] - 0s 103us/step - loss: 0.1113\n",
      "Epoch 55/100\n",
      "105/105 [==============================] - 0s 106us/step - loss: 0.1094\n",
      "Epoch 56/100\n",
      "105/105 [==============================] - 0s 74us/step - loss: 0.1073\n",
      "Epoch 57/100\n",
      "105/105 [==============================] - 0s 65us/step - loss: 0.1053\n",
      "Epoch 58/100\n",
      "105/105 [==============================] - 0s 64us/step - loss: 0.1032\n",
      "Epoch 59/100\n",
      "105/105 [==============================] - 0s 64us/step - loss: 0.1015\n",
      "Epoch 60/100\n",
      "105/105 [==============================] - 0s 70us/step - loss: 0.0995\n",
      "Epoch 61/100\n",
      "105/105 [==============================] - 0s 109us/step - loss: 0.0979\n",
      "Epoch 62/100\n",
      "105/105 [==============================] - 0s 63us/step - loss: 0.0965\n",
      "Epoch 63/100\n",
      "105/105 [==============================] - 0s 93us/step - loss: 0.0945\n",
      "Epoch 64/100\n",
      "105/105 [==============================] - 0s 94us/step - loss: 0.0931\n",
      "Epoch 65/100\n",
      "105/105 [==============================] - 0s 176us/step - loss: 0.0918\n",
      "Epoch 66/100\n",
      "105/105 [==============================] - 0s 136us/step - loss: 0.0909\n",
      "Epoch 67/100\n",
      "105/105 [==============================] - 0s 187us/step - loss: 0.0895\n",
      "Epoch 68/100\n",
      "105/105 [==============================] - 0s 115us/step - loss: 0.0883\n",
      "Epoch 69/100\n",
      "105/105 [==============================] - 0s 117us/step - loss: 0.0871\n",
      "Epoch 70/100\n",
      "105/105 [==============================] - 0s 98us/step - loss: 0.0865\n",
      "Epoch 71/100\n",
      "105/105 [==============================] - 0s 83us/step - loss: 0.0850\n",
      "Epoch 72/100\n",
      "105/105 [==============================] - 0s 102us/step - loss: 0.0848\n",
      "Epoch 73/100\n",
      "105/105 [==============================] - 0s 111us/step - loss: 0.0829\n",
      "Epoch 74/100\n",
      "105/105 [==============================] - 0s 89us/step - loss: 0.0818\n",
      "Epoch 75/100\n",
      "105/105 [==============================] - 0s 130us/step - loss: 0.0820\n",
      "Epoch 76/100\n",
      "105/105 [==============================] - 0s 120us/step - loss: 0.0811\n",
      "Epoch 77/100\n",
      "105/105 [==============================] - 0s 111us/step - loss: 0.0805\n",
      "Epoch 78/100\n",
      "105/105 [==============================] - 0s 84us/step - loss: 0.0788\n",
      "Epoch 79/100\n",
      "105/105 [==============================] - 0s 143us/step - loss: 0.0776\n",
      "Epoch 80/100\n",
      "105/105 [==============================] - 0s 151us/step - loss: 0.0770\n",
      "Epoch 81/100\n",
      "105/105 [==============================] - 0s 122us/step - loss: 0.0764\n",
      "Epoch 82/100\n",
      "105/105 [==============================] - 0s 114us/step - loss: 0.0755\n",
      "Epoch 83/100\n",
      "105/105 [==============================] - 0s 144us/step - loss: 0.0749\n",
      "Epoch 84/100\n",
      "105/105 [==============================] - 0s 97us/step - loss: 0.0752\n",
      "Epoch 85/100\n",
      "105/105 [==============================] - 0s 102us/step - loss: 0.0735\n",
      "Epoch 86/100\n",
      "105/105 [==============================] - 0s 99us/step - loss: 0.0741\n",
      "Epoch 87/100\n",
      "105/105 [==============================] - 0s 84us/step - loss: 0.0728\n",
      "Epoch 88/100\n",
      "105/105 [==============================] - 0s 88us/step - loss: 0.0728\n",
      "Epoch 89/100\n",
      "105/105 [==============================] - 0s 142us/step - loss: 0.0725\n",
      "Epoch 90/100\n",
      "105/105 [==============================] - 0s 105us/step - loss: 0.0720\n",
      "Epoch 91/100\n",
      "105/105 [==============================] - 0s 96us/step - loss: 0.0708\n",
      "Epoch 92/100\n",
      "105/105 [==============================] - 0s 77us/step - loss: 0.0707\n",
      "Epoch 93/100\n",
      "105/105 [==============================] - 0s 101us/step - loss: 0.0696\n",
      "Epoch 94/100\n",
      "105/105 [==============================] - 0s 119us/step - loss: 0.0693\n",
      "Epoch 95/100\n",
      "105/105 [==============================] - 0s 69us/step - loss: 0.0689\n",
      "Epoch 96/100\n",
      "105/105 [==============================] - 0s 97us/step - loss: 0.0688\n",
      "Epoch 97/100\n",
      "105/105 [==============================] - 0s 69us/step - loss: 0.0689\n",
      "Epoch 98/100\n",
      "105/105 [==============================] - 0s 85us/step - loss: 0.0684\n",
      "Epoch 99/100\n",
      "105/105 [==============================] - 0s 86us/step - loss: 0.0676\n",
      "Epoch 100/100\n",
      "105/105 [==============================] - 0s 71us/step - loss: 0.0669\n"
     ]
    }
   ],
   "source": [
    "hidden = 4\n",
    "learning_rate = 0.01\n",
    "epochs = 100\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Dense(hidden, input_dim=M, activation='relu'))\n",
    "model.add(Dense(1, activation='sigmoid'))\n",
    "model.compile(loss=\"binary_crossentropy\", optimizer=Adam(learning_rate))\n",
    "\n",
    "model.summary()\n",
    "\n",
    "hist = model.fit(X[mask], y[mask], epochs=epochs, verbose=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7ff192e40c88>"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.DataFrame(hist.history).plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hit rate (train set) - 97.14%, Hit rate (test set) - 97.78%\n"
     ]
    }
   ],
   "source": [
    "pred_train = model.predict(X[mask]).flatten() > 0.5\n",
    "pred_test = model.predict(X[~mask]).flatten() > 0.5\n",
    "print('Hit rate (train set) - {0:.02%}, Hit rate (test set) - {1:.02%}'.format(\n",
    "    (pred_train == y[mask]).mean(), (pred_test == y[~mask]).mean()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Much better!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## MNIST (Application of backprop by Yann LeCun, 1989)\n",
    "\n",
    "<img src=\"https://paper-attachments.dropbox.com/s_1F3ADB50AE0E9BFFE47A31C329F32861D3C6E5DDE635C337B9BB647E093C8832_1571320140589_image.png\" style=\"width: 50%\"/>\n",
    "<img src=\"https://camo.githubusercontent.com/807102dc1f1f17a1318535548d05d54867135be2/68747470733a2f2f6d6c34612e6769746875622e696f2f696d616765732f666967757265732f6d6e6973742d696e7075742e706e67\" style=\"width: 50%\"/>\n",
    "<img src=\"https://paper-attachments.dropbox.com/s_1F3ADB50AE0E9BFFE47A31C329F32861D3C6E5DDE635C337B9BB647E093C8832_1571320219769_image.png\" alt=\"Before training\" style=\"width: 50%\"/>\n",
    "<img src=\"https://paper-attachments.dropbox.com/s_1F3ADB50AE0E9BFFE47A31C329F32861D3C6E5DDE635C337B9BB647E093C8832_1571320227765_image.png\" alt=\"After training\" style=\"width: 50%\"/>\n",
    "<img src=\"https://paper-attachments.dropbox.com/s_1F3ADB50AE0E9BFFE47A31C329F32861D3C6E5DDE635C337B9BB647E093C8832_1571118051404_image.png\" style=\"width: 50%\"/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "(X_train, y_train), (X_test, y_test) = keras.datasets.mnist.load_data()\n",
    "# Normalize\n",
    "X_train = X_train / 255\n",
    "X_test = X_test / 255"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'plt' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-6-5fc97eba29a5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m30\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'gray'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'off'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'plt' is not defined"
     ]
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 3))\n",
    "for i in range(30):\n",
    "    plt.subplot(3, 10, i + 1)\n",
    "    plt.imshow(X_train[i], cmap='gray')\n",
    "    plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "flatten (Flatten)            (None, 784)               0         \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 64)                50240     \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 32)                2080      \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 10)                330       \n",
      "=================================================================\n",
      "Total params: 52,650\n",
      "Trainable params: 52,650\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = keras.models.Sequential()\n",
    "model.add(keras.layers.Flatten(input_shape=[28, 28]))\n",
    "model.add(keras.layers.Dense(64, activation=\"relu\"))\n",
    "model.add(keras.layers.Dense(32, activation=\"relu\"))\n",
    "model.add(keras.layers.Dense(10, activation=\"softmax\"))\n",
    "model.compile(loss=\"sparse_categorical_crossentropy\",\n",
    "              optimizer=\"sgd\",\n",
    "              metrics=[\"accuracy\"])\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 48000 samples, validate on 12000 samples\n",
      "Epoch 1/20\n",
      "48000/48000 [==============================] - 3s 55us/sample - loss: 0.7528 - accuracy: 0.8008 - val_loss: 0.3494 - val_accuracy: 0.9028\n",
      "Epoch 2/20\n",
      "48000/48000 [==============================] - 2s 50us/sample - loss: 0.3325 - accuracy: 0.9053 - val_loss: 0.2806 - val_accuracy: 0.9209\n",
      "Epoch 3/20\n",
      "48000/48000 [==============================] - 3s 57us/sample - loss: 0.2765 - accuracy: 0.9198 - val_loss: 0.2482 - val_accuracy: 0.9284\n",
      "Epoch 4/20\n",
      "48000/48000 [==============================] - 3s 56us/sample - loss: 0.2416 - accuracy: 0.9299 - val_loss: 0.2202 - val_accuracy: 0.9371\n",
      "Epoch 5/20\n",
      "48000/48000 [==============================] - 3s 62us/sample - loss: 0.2155 - accuracy: 0.9377 - val_loss: 0.2028 - val_accuracy: 0.9427\n",
      "Epoch 6/20\n",
      "48000/48000 [==============================] - 3s 53us/sample - loss: 0.1945 - accuracy: 0.9426 - val_loss: 0.1897 - val_accuracy: 0.9457\n",
      "Epoch 7/20\n",
      "48000/48000 [==============================] - 3s 56us/sample - loss: 0.1765 - accuracy: 0.9488 - val_loss: 0.1711 - val_accuracy: 0.9519\n",
      "Epoch 8/20\n",
      "48000/48000 [==============================] - 3s 56us/sample - loss: 0.1624 - accuracy: 0.9524 - val_loss: 0.1626 - val_accuracy: 0.9542\n",
      "Epoch 9/20\n",
      "48000/48000 [==============================] - 3s 52us/sample - loss: 0.1500 - accuracy: 0.9561 - val_loss: 0.1535 - val_accuracy: 0.9562\n",
      "Epoch 10/20\n",
      "48000/48000 [==============================] - 2s 52us/sample - loss: 0.1393 - accuracy: 0.9598 - val_loss: 0.1446 - val_accuracy: 0.9594\n",
      "Epoch 11/20\n",
      "48000/48000 [==============================] - 2s 50us/sample - loss: 0.1291 - accuracy: 0.9626 - val_loss: 0.1419 - val_accuracy: 0.9603\n",
      "Epoch 12/20\n",
      "48000/48000 [==============================] - 3s 60us/sample - loss: 0.1215 - accuracy: 0.9645 - val_loss: 0.1341 - val_accuracy: 0.9613\n",
      "Epoch 13/20\n",
      "48000/48000 [==============================] - 3s 58us/sample - loss: 0.1141 - accuracy: 0.9674 - val_loss: 0.1304 - val_accuracy: 0.9632\n",
      "Epoch 14/20\n",
      "48000/48000 [==============================] - 3s 54us/sample - loss: 0.1077 - accuracy: 0.9686 - val_loss: 0.1258 - val_accuracy: 0.9633\n",
      "Epoch 15/20\n",
      "48000/48000 [==============================] - 3s 65us/sample - loss: 0.1018 - accuracy: 0.9704 - val_loss: 0.1240 - val_accuracy: 0.9649\n",
      "Epoch 16/20\n",
      "48000/48000 [==============================] - 3s 66us/sample - loss: 0.0965 - accuracy: 0.9723 - val_loss: 0.1195 - val_accuracy: 0.9666\n",
      "Epoch 17/20\n",
      "48000/48000 [==============================] - 3s 65us/sample - loss: 0.0916 - accuracy: 0.9737 - val_loss: 0.1206 - val_accuracy: 0.9654\n",
      "Epoch 18/20\n",
      "48000/48000 [==============================] - 3s 60us/sample - loss: 0.0869 - accuracy: 0.9753 - val_loss: 0.1163 - val_accuracy: 0.9660\n",
      "Epoch 19/20\n",
      "48000/48000 [==============================] - 3s 59us/sample - loss: 0.0827 - accuracy: 0.9762 - val_loss: 0.1114 - val_accuracy: 0.9677\n",
      "Epoch 20/20\n",
      "48000/48000 [==============================] - 3s 56us/sample - loss: 0.0783 - accuracy: 0.9777 - val_loss: 0.1154 - val_accuracy: 0.9662\n"
     ]
    }
   ],
   "source": [
    "loss = model.fit(X_train, y_train, epochs=20, validation_split=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x14ff84090>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.DataFrame(loss.history).plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy on test set - 96.92%\n"
     ]
    }
   ],
   "source": [
    "pred = model.predict(X_test).argmax(axis=1)\n",
    "print('Accuracy on test set - {0:.02%}'.format((pred == y_test).mean()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 100 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 10))\n",
    "for label in range(10):\n",
    "    for i in range(10):\n",
    "        plt.subplot(10, 10, label * 10 + i + 1)\n",
    "        plt.imshow(X_test[pred == label][i], cmap='gray')\n",
    "        plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's look only at misclassifiesd cases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 100 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 10))\n",
    "for label in range(10):\n",
    "    for i in range(10):\n",
    "        plt.subplot(10, 10, label * 10 + i + 1)\n",
    "        mask = (pred == i) & (y_test == label)\n",
    "        if mask.sum() > 0:\n",
    "            plt.imshow(X_test[mask][0], cmap='gray')\n",
    "        plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you might remember Random Forest achieved similar accuracy so why do we need NN then? Well, let's try to increse number of parameters in out network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "flatten_1 (Flatten)          (None, 784)               0         \n",
      "_________________________________________________________________\n",
      "dense_3 (Dense)              (None, 1000)              785000    \n",
      "_________________________________________________________________\n",
      "dense_4 (Dense)              (None, 500)               500500    \n",
      "_________________________________________________________________\n",
      "dense_5 (Dense)              (None, 10)                5010      \n",
      "=================================================================\n",
      "Total params: 1,290,510\n",
      "Trainable params: 1,290,510\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = keras.models.Sequential()\n",
    "model.add(keras.layers.Flatten(input_shape=[28, 28]))\n",
    "model.add(keras.layers.Dense(1000, activation=\"relu\"))\n",
    "model.add(keras.layers.Dense(500, activation=\"relu\"))\n",
    "model.add(keras.layers.Dense(10, activation=\"softmax\"))\n",
    "model.compile(loss=\"sparse_categorical_crossentropy\",\n",
    "              optimizer=\"sgd\",\n",
    "              metrics=[\"accuracy\"])\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 48000 samples, validate on 12000 samples\n",
      "Epoch 1/20\n",
      "48000/48000 [==============================] - 7s 152us/sample - loss: 0.6053 - accuracy: 0.8541 - val_loss: 0.3079 - val_accuracy: 0.9150\n",
      "Epoch 2/20\n",
      "48000/48000 [==============================] - 9s 189us/sample - loss: 0.2896 - accuracy: 0.9180 - val_loss: 0.2429 - val_accuracy: 0.9322\n",
      "Epoch 3/20\n",
      "48000/48000 [==============================] - 8s 162us/sample - loss: 0.2373 - accuracy: 0.9331 - val_loss: 0.2100 - val_accuracy: 0.9415\n",
      "Epoch 4/20\n",
      "48000/48000 [==============================] - 8s 173us/sample - loss: 0.2028 - accuracy: 0.9428 - val_loss: 0.1833 - val_accuracy: 0.9504\n",
      "Epoch 5/20\n",
      "48000/48000 [==============================] - 10s 205us/sample - loss: 0.1766 - accuracy: 0.9508 - val_loss: 0.1656 - val_accuracy: 0.9545\n",
      "Epoch 6/20\n",
      "48000/48000 [==============================] - 9s 181us/sample - loss: 0.1558 - accuracy: 0.9559 - val_loss: 0.1551 - val_accuracy: 0.9567\n",
      "Epoch 7/20\n",
      "48000/48000 [==============================] - 7s 151us/sample - loss: 0.1395 - accuracy: 0.9607 - val_loss: 0.1394 - val_accuracy: 0.9605\n",
      "Epoch 8/20\n",
      "48000/48000 [==============================] - 8s 163us/sample - loss: 0.1256 - accuracy: 0.9644 - val_loss: 0.1314 - val_accuracy: 0.9631\n",
      "Epoch 9/20\n",
      "48000/48000 [==============================] - 8s 169us/sample - loss: 0.1137 - accuracy: 0.9689 - val_loss: 0.1246 - val_accuracy: 0.9655\n",
      "Epoch 10/20\n",
      "48000/48000 [==============================] - 8s 161us/sample - loss: 0.1035 - accuracy: 0.9711 - val_loss: 0.1172 - val_accuracy: 0.9668\n",
      "Epoch 11/20\n",
      "48000/48000 [==============================] - 8s 159us/sample - loss: 0.0946 - accuracy: 0.9739 - val_loss: 0.1108 - val_accuracy: 0.9687\n",
      "Epoch 12/20\n",
      "48000/48000 [==============================] - 8s 162us/sample - loss: 0.0870 - accuracy: 0.9762 - val_loss: 0.1065 - val_accuracy: 0.9701\n",
      "Epoch 13/20\n",
      "48000/48000 [==============================] - 8s 160us/sample - loss: 0.0799 - accuracy: 0.9788 - val_loss: 0.1007 - val_accuracy: 0.9705\n",
      "Epoch 14/20\n",
      "48000/48000 [==============================] - 8s 164us/sample - loss: 0.0737 - accuracy: 0.9810 - val_loss: 0.0990 - val_accuracy: 0.9717\n",
      "Epoch 15/20\n",
      "48000/48000 [==============================] - 8s 159us/sample - loss: 0.0681 - accuracy: 0.9822 - val_loss: 0.0950 - val_accuracy: 0.9732\n",
      "Epoch 16/20\n",
      "48000/48000 [==============================] - 8s 161us/sample - loss: 0.0631 - accuracy: 0.9835 - val_loss: 0.0917 - val_accuracy: 0.9736\n",
      "Epoch 17/20\n",
      "48000/48000 [==============================] - 9s 183us/sample - loss: 0.0586 - accuracy: 0.9849 - val_loss: 0.0912 - val_accuracy: 0.9733\n",
      "Epoch 18/20\n",
      "48000/48000 [==============================] - 8s 161us/sample - loss: 0.0542 - accuracy: 0.9864 - val_loss: 0.0901 - val_accuracy: 0.9736\n",
      "Epoch 19/20\n",
      "48000/48000 [==============================] - 8s 158us/sample - loss: 0.0505 - accuracy: 0.9870 - val_loss: 0.0866 - val_accuracy: 0.9746\n",
      "Epoch 20/20\n",
      "48000/48000 [==============================] - 8s 165us/sample - loss: 0.0472 - accuracy: 0.9882 - val_loss: 0.0841 - val_accuracy: 0.9753\n"
     ]
    }
   ],
   "source": [
    "loss = model.fit(X_train, y_train, epochs=20, validation_split=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy on test set - 97.59%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.DataFrame(loss.history).plot()\n",
    "pred = model.predict(X_test).argmax(axis=1)\n",
    "print('Accuracy on test set - {0:.02%}'.format((pred == y_test).mean()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Thats good. For examply by using layers 1500, 1000, 500, 10 you can improve accuracy to 98.24%, but training will take quite some time. Acctually you can go even futher with simple data augmentation techniques - https://arxiv.org/pdf/1003.0358.pdf\n",
    "\n",
    "## A note on Gradien Descent\n",
    "\n",
    "Without noticing on the way we have used gradient descent, let's see how it works in depth.\n",
    "\n",
    "<img src=\"https://miro.medium.com/max/1005/1*_6TVU8yGpXNYDkkpOfnJ6Q.png\" style=\"width: 50%\"/>\n",
    "\n",
    "Note, that gradient descent is sensitive to the step size.\n",
    "\n",
    "<img src=\"https://www.researchgate.net/profile/Tom_Duckett/publication/224324276/figure/fig2/AS:359779089305617@1462789427971/Convergence-Conditions-in-Gradient-Descent-Algorithm.png\" style=\"width: 50%\"/>\n",
    "\n",
    "We will meet some solutions to this problem in the future.\n",
    "\n",
    "Also gradient descent is not guaranteed to find global minimum, but when we work with high dimensional data this risk partly wanishes.\n",
    "\n",
    "<img src=\"https://paper-attachments.dropbox.com/s_F57E27FDF0C54777F2844EECCBABB7DF8EEB9597E5F323F9CC73F1690617FCAD_1569311505423_image.png\" style=\"width: 50%\"/>\n",
    "\n",
    "Let's implement gradient descent for linear regression as follows\n",
    "\n",
    "<img src=\"https://kousikk.files.wordpress.com/2014/11/screen-shot-2014-11-12-at-11-57-47-am.png\" style=\"width: 50%\"/>\n",
    "\n",
    "```python\n",
    "k, b = 0, 0     # initial values\n",
    "epochs = 1000\n",
    "learning_rate = 0.1\n",
    "\n",
    "L = []   # storage for k and b through training\n",
    "for i in range(epochs):\n",
    "    pred = k * x + b\n",
    "    L.append([k, b])\n",
    "    pred_diff_k = x\n",
    "    pred_diff_b = 1\n",
    "    k += 2 * learning_rate * np.mean(pred_diff_k * (y - pred))\n",
    "    b += 2 * learning_rate * np.mean(pred_diff_b * (y - pred))\n",
    "```\n",
    "\n",
    "**TASK:** try that out on your own and add plots on the way, you should get something similar to this\n",
    "\n",
    "<img src=\"https://paper-attachments.dropbox.com/s_F57E27FDF0C54777F2844EECCBABB7DF8EEB9597E5F323F9CC73F1690617FCAD_1567686156887_grad_desc_demo.gif\" style=\"width: 50%\"/>\n",
    "\n",
    "\n",
    "## A note on Dropout\n",
    "\n",
    "There is a nice and popular way to **prevent over-fitting** in Neural Networks - turn off some neurons during training procudure.\n",
    "\n",
    "<img src=\"https://miro.medium.com/proxy/1*iWQzxhVlvadk6VAJjsgXgg.png\" style=\"width: 50%\"/>\n",
    "\n",
    "\n",
    "You can try that out by adding Dropout layers between Dense ones as follows:\n",
    "\n",
    "```python\n",
    "model.add(keras.layers.Flatten(input_shape=[28, 28]))\n",
    "model.add(keras.layers.Dense(64, activation=\"relu\"))\n",
    "model.add(keras.layers.Dropout(0.1))\n",
    "model.add(keras.layers.Dense(32, activation=\"relu\"))\n",
    "model.add(keras.layers.Dropout(0.1))\n",
    "model.add(keras.layers.Dense(10, activation=\"softmax\"))\n",
    "```\n",
    "\n",
    "Try that out.\n",
    "\n",
    "## A note on Architectures\n",
    "\n",
    "There are a lot of possible architectures, we have only touched the surface. Take a glympse at the variations of Neural Networks [here](https://towardsdatascience.com/the-mostly-complete-chart-of-neural-networks-explained-3fb6f2367464).\n",
    "\n",
    "<img src=\"https://miro.medium.com/max/2000/1*cuTSPlTq0a_327iTPJyD-Q.png\" style=\"width: 80%\"/>\n",
    "\n",
    "# (re)Sources\n",
    "- Rosenblatt’s perceptron, the first modern neural network ([blog post](https://towardsdatascience.com/rosenblatts-perceptron-the-very-first-neural-network-37a3ec09038a))\n",
    "- Neural Network in 11 lines of code ([blog post](https://iamtrask.github.io/2015/07/12/basic-python-network/))\n",
    "- Favio Vázquez [posts](https://medium.com/@faviovazquez)\n",
    "- Neural Networks with good MNIST [demo](https://ml4a.github.io/ml4a/neural_networks/)\n",
    "- Legendary Andrew Ng [course](https://www.coursera.org/learn/machine-learning)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  },
  "nteract": {
   "version": "0.21.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
