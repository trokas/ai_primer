{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Randomly generate center, number of angles, spin angle, scaling\n",
    "- Draw and fill\n",
    "- Circle, 3-8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from functools import partial\n",
    "import drawSvg as draw\n",
    "import matplotlib.pyplot as plt\n",
    "from imageio import imread\n",
    "\n",
    "from tensorflow import keras"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 364,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 0 - circle\n",
    "shapes = {0: {'origin': partial(np.random.uniform, low=-20, high=20, size=2),\n",
    "              'scale': partial(np.random.uniform, low=10, high=20, size=1)},\n",
    "          **{N: {'origin': partial(np.random.uniform, low=-20, high=20, size=2),\n",
    "                 'spin': partial(np.random.uniform, low=0, high=2 * np.pi, size=1),\n",
    "                 'scale': partial(np.random.uniform, low=10, high=20, size=1)} for N in range(3, 7)}}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 425,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generator(shapes, dpi=50):\n",
    "    \n",
    "    while True:\n",
    "\n",
    "        N = np.random.choice(list(shapes.keys()))\n",
    "        if N == 0:\n",
    "            scale = shapes[N]['scale']()[0]\n",
    "            origin = shapes[N]['origin']()\n",
    "            if np.all(np.abs(np.array(\n",
    "                [origin[0] - scale, origin[0] + scale,\n",
    "                 origin[1] - scale, origin[1] + scale])) <= int(dpi / 2)):\n",
    "                d = draw.Drawing(dpi, dpi, origin='center', displayInline=False)\n",
    "                d.append(draw.Circle(*origin, scale, fill='black'))\n",
    "                yield d, N\n",
    "        else:\n",
    "            spin = shapes[N]['spin']()[0]\n",
    "            scale = shapes[N]['scale']()[0]\n",
    "            origin = shapes[N]['origin']()\n",
    "\n",
    "            rad = [scale * np.exp((2 * np.pi / N * n + spin) * 1j) for n in range(N)]\n",
    "            coord = [i for c in [[origin[0] + c.real, origin[1] + c.imag] for c in rad] for i in c]\n",
    "\n",
    "            # Draw an irregular polygon\n",
    "            if np.all(np.abs(np.array(coord)) <= int(dpi / 2)):\n",
    "                d = draw.Drawing(dpi, dpi, origin='center', displayInline=False)\n",
    "                d.append(draw.Lines(*coord, close=True, fill='black'))\n",
    "                yield d, N\n",
    "\n",
    "gen = generator(shapes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 426,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x216 with 30 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 3))\n",
    "for i in range(30):\n",
    "    d, N = next(gen)\n",
    "    d.savePng('tmp.png')\n",
    "    plt.subplot(3, 10, i + 1)\n",
    "    plt.imshow(imread('tmp.png')[:, :, 3], cmap='gray')\n",
    "    plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Training examples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 420,
   "metadata": {},
   "outputs": [],
   "source": [
    "def batch_gen(batch_sice=32, dim=50, gen=generator(shapes)):\n",
    "    while True:\n",
    "        X = np.zeros((batch_sice, dim, dim, 1))\n",
    "        y = np.zeros((batch_sice))\n",
    "        for i in range(batch_sice):\n",
    "            d, N = next(gen)\n",
    "            # Fix class label\n",
    "            y[i] = 0 if N == 0 else N - 2\n",
    "            d.savePng('tmp.png')\n",
    "            # Rescale\n",
    "            X[i] = imread('tmp.png')[:, :, [3]] / 255\n",
    "        yield X, y\n",
    "\n",
    "gen = batch_gen()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 421,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_model(hidden):\n",
    "    model = keras.models.Sequential()\n",
    "    model.add(keras.layers.Flatten(input_shape=[50, 50, 1]))\n",
    "    model.add(keras.layers.Dense(hidden, activation=\"relu\"))\n",
    "    model.add(keras.layers.Dense(hidden, activation=\"relu\"))\n",
    "    model.add(keras.layers.Dense(6, activation=\"softmax\"))\n",
    "    model.compile(loss=\"sparse_categorical_crossentropy\",\n",
    "                  optimizer=\"sgd\",\n",
    "                  metrics=[\"accuracy\"])\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 422,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "100/100 [==============================] - 17s 173ms/step - loss: 1.6635 - accuracy: 0.2209\n",
      "Epoch 2/20\n",
      "100/100 [==============================] - 16s 161ms/step - loss: 1.5629 - accuracy: 0.2887\n",
      "Epoch 3/20\n",
      "100/100 [==============================] - 16s 161ms/step - loss: 1.5133 - accuracy: 0.3388\n",
      "Epoch 4/20\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 1.4919 - accuracy: 0.3388\n",
      "Epoch 5/20\n",
      "100/100 [==============================] - 18s 182ms/step - loss: 1.4611 - accuracy: 0.3522\n",
      "Epoch 6/20\n",
      "100/100 [==============================] - 20s 197ms/step - loss: 1.4426 - accuracy: 0.3506\n",
      "Epoch 7/20\n",
      "100/100 [==============================] - 21s 211ms/step - loss: 1.4316 - accuracy: 0.3444\n",
      "Epoch 8/20\n",
      "100/100 [==============================] - 19s 193ms/step - loss: 1.4267 - accuracy: 0.3422\n",
      "Epoch 9/20\n",
      "100/100 [==============================] - 18s 178ms/step - loss: 1.4035 - accuracy: 0.3525\n",
      "Epoch 10/20\n",
      "100/100 [==============================] - 20s 203ms/step - loss: 1.3854 - accuracy: 0.3638\n",
      "Epoch 11/20\n",
      "100/100 [==============================] - 22s 219ms/step - loss: 1.3712 - accuracy: 0.3734\n",
      "Epoch 12/20\n",
      "100/100 [==============================] - 21s 209ms/step - loss: 1.3550 - accuracy: 0.3778\n",
      "Epoch 13/20\n",
      "100/100 [==============================] - 18s 181ms/step - loss: 1.3572 - accuracy: 0.3691\n",
      "Epoch 14/20\n",
      "100/100 [==============================] - 18s 178ms/step - loss: 1.3126 - accuracy: 0.3959\n",
      "Epoch 15/20\n",
      "100/100 [==============================] - 19s 185ms/step - loss: 1.3031 - accuracy: 0.4000\n",
      "Epoch 16/20\n",
      "100/100 [==============================] - 18s 181ms/step - loss: 1.2997 - accuracy: 0.4006\n",
      "Epoch 17/20\n",
      "100/100 [==============================] - 18s 180ms/step - loss: 1.2894 - accuracy: 0.3994\n",
      "Epoch 18/20\n",
      "100/100 [==============================] - 18s 176ms/step - loss: 1.2805 - accuracy: 0.3969\n",
      "Epoch 19/20\n",
      "100/100 [==============================] - 19s 195ms/step - loss: 1.2570 - accuracy: 0.4109\n",
      "Epoch 20/20\n",
      "100/100 [==============================] - 18s 181ms/step - loss: 1.2308 - accuracy: 0.4331\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x149b804d0>"
      ]
     },
     "execution_count": 422,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = get_model(100)\n",
    "loss = model.fit(gen, epochs=20, steps_per_epoch=100)\n",
    "\n",
    "pd.DataFrame(loss.history).plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 415,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_cnn_model():\n",
    "    model = keras.models.Sequential()\n",
    "    model.add(keras.layers.Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=[50, 50, 1]))\n",
    "    model.add(keras.layers.Conv2D(32, kernel_size=(3, 3), activation='relu'))\n",
    "    model.add(keras.layers.Flatten())\n",
    "    model.add(keras.layers.Dense(100, activation=\"relu\"))\n",
    "    model.add(keras.layers.Dense(6, activation=\"softmax\"))\n",
    "    model.compile(loss=\"sparse_categorical_crossentropy\",\n",
    "                  optimizer=\"adam\",\n",
    "                  metrics=[\"accuracy\"])\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 416,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "100/100 [==============================] - 27s 268ms/step - loss: 1.5422 - accuracy: 0.2912\n",
      "Epoch 2/20\n",
      "100/100 [==============================] - 25s 246ms/step - loss: 1.3400 - accuracy: 0.4006\n",
      "Epoch 3/20\n",
      "100/100 [==============================] - 26s 260ms/step - loss: 1.2492 - accuracy: 0.4241\n",
      "Epoch 4/20\n",
      "100/100 [==============================] - 22s 217ms/step - loss: 1.1158 - accuracy: 0.4831\n",
      "Epoch 5/20\n",
      "100/100 [==============================] - 24s 240ms/step - loss: 1.0036 - accuracy: 0.5450\n",
      "Epoch 6/20\n",
      "100/100 [==============================] - 26s 259ms/step - loss: 0.8526 - accuracy: 0.6175\n",
      "Epoch 7/20\n",
      "100/100 [==============================] - 25s 246ms/step - loss: 0.7640 - accuracy: 0.6456\n",
      "Epoch 8/20\n",
      "100/100 [==============================] - 24s 236ms/step - loss: 0.6575 - accuracy: 0.7169\n",
      "Epoch 9/20\n",
      "100/100 [==============================] - 29s 288ms/step - loss: 0.5826 - accuracy: 0.7450\n",
      "Epoch 10/20\n",
      "100/100 [==============================] - 24s 241ms/step - loss: 0.4590 - accuracy: 0.8163\n",
      "Epoch 11/20\n",
      "100/100 [==============================] - 26s 260ms/step - loss: 0.4066 - accuracy: 0.8419\n",
      "Epoch 12/20\n",
      "100/100 [==============================] - 26s 258ms/step - loss: 0.3475 - accuracy: 0.8625\n",
      "Epoch 13/20\n",
      "100/100 [==============================] - 26s 261ms/step - loss: 0.3240 - accuracy: 0.8778\n",
      "Epoch 14/20\n",
      "100/100 [==============================] - 24s 242ms/step - loss: 0.2830 - accuracy: 0.8909\n",
      "Epoch 15/20\n",
      "100/100 [==============================] - 24s 239ms/step - loss: 0.2567 - accuracy: 0.8925\n",
      "Epoch 16/20\n",
      "100/100 [==============================] - 24s 240ms/step - loss: 0.2548 - accuracy: 0.9009\n",
      "Epoch 17/20\n",
      "100/100 [==============================] - 22s 224ms/step - loss: 0.2098 - accuracy: 0.9206\n",
      "Epoch 18/20\n",
      "100/100 [==============================] - 26s 256ms/step - loss: 0.2131 - accuracy: 0.9172\n",
      "Epoch 19/20\n",
      "100/100 [==============================] - 24s 237ms/step - loss: 0.1984 - accuracy: 0.9272\n",
      "Epoch 20/20\n",
      "100/100 [==============================] - 24s 240ms/step - loss: 0.1604 - accuracy: 0.9388\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x14f2ef150>"
      ]
     },
     "execution_count": 416,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = get_cnn_model()\n",
    "loss = model.fit(gen, epochs=20, steps_per_epoch=100)\n",
    "\n",
    "pd.DataFrame(loss.history).plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data is complex enough so that simple models will fail. CNN's work nicely, but to get accuracy above 95 will be challenging.\n",
    "\n",
    "Idea: to test best students just change random generator functions a bit for train and validation sets. For example circles could show up only on the left side in the train set, but on both sides in validation set."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Train data dump"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def data_dump(size, dim=50, gen=generator(shapes)):\n",
    "    X = np.zeros((size, dim, dim))\n",
    "    y = np.zeros((size))\n",
    "    for i in range(size):\n",
    "        d, y[i] = next(gen)\n",
    "        d.savePng('tmp.png')\n",
    "        X[i] = imread('tmp.png')[:, :, 3]\n",
    "    return X, y\n",
    "\n",
    "X, y = data_dump(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pickle.dump(open('flatland.pickle', 'wb'), (X, y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pickle.load(open('flatland.pickle', 'rb'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I can make automated submit later, before the course starts."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
