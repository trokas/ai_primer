{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# RF (Random Forest)\n",
    "\n",
    "Before defining random forests we need to explore it's main building block - entropy.\n",
    "\n",
    "## Entropy\n",
    "\n",
    "Coined by Claude Shannon in “A Mathematical Theory of Communication” 1948 ([link](http://www.math.harvard.edu/~ctm/home/text/others/shannon/entropy/entropy.pdf)).\n",
    "Main question: how much useful information are we transmitting?\n",
    "When we transmit one bit of information we reduce recipients uncertainty by the factor of two.\n",
    "\n",
    "P.S.: same paper introduced term bit = **bi**nary uni**t**.\n",
    "\n",
    "----------\n",
    "![](https://paper-attachments.dropbox.com/s_2941BE57FDEFC63DC92A33C8A153CCCD7EFCF49D20B1544D9F4817E94EBFB0CD_1568908108119_Screenshot+from+2019-09-19+18-47-43.png)\n",
    "\n",
    "----------\n",
    "![](https://paper-attachments.dropbox.com/s_2941BE57FDEFC63DC92A33C8A153CCCD7EFCF49D20B1544D9F4817E94EBFB0CD_1568908220168_Screenshot+from+2019-09-19+18-49-26.png)\n",
    "\n",
    "\n",
    "How much information are we getting measured in bits? $$- \\log_2 (prob) = bits$$\n",
    "\n",
    "----------\n",
    "![](https://paper-attachments.dropbox.com/s_2941BE57FDEFC63DC92A33C8A153CCCD7EFCF49D20B1544D9F4817E94EBFB0CD_1568908568165_Screenshot+from+2019-09-19+18-52-14.png)\n",
    "\n",
    "----------\n",
    "\n",
    "\n",
    "![](https://paper-attachments.dropbox.com/s_2941BE57FDEFC63DC92A33C8A153CCCD7EFCF49D20B1544D9F4817E94EBFB0CD_1568908575679_Screenshot+from+2019-09-19+18-52-32.png)\n",
    "\n",
    "----------\n",
    "![](https://paper-attachments.dropbox.com/s_2941BE57FDEFC63DC92A33C8A153CCCD7EFCF49D20B1544D9F4817E94EBFB0CD_1568908583110_Screenshot+from+2019-09-19+18-53-46.png)\n",
    "\n",
    "\n",
    "Entropy: $$H(p)=-\\sum_i p_i \\log_2 (p_i)$$\n",
    "\n",
    "----------\n",
    "\n",
    "### Cross-Entropy\n",
    "\n",
    "Let $p$ - true distribution, $q$ - predicted distribution, then Cross-entropy is\n",
    "$$H(p,q) = -\\sum_i p_i \\log_2(q_i)$$\n",
    "If predictions are perfect Cross-entropy is equal to entropy, but usually it is greater than entropy.\n",
    "Cross-entropy is often used for ML as a cost function (log-loss) comparing $p$ with $q$.\n",
    "\n",
    "----------\n",
    "![](https://paper-attachments.dropbox.com/s_2941BE57FDEFC63DC92A33C8A153CCCD7EFCF49D20B1544D9F4817E94EBFB0CD_1568909269560_Screenshot+from+2019-09-19+19-00-24.png)\n",
    "\n",
    "----------\n",
    "![](https://paper-attachments.dropbox.com/s_2941BE57FDEFC63DC92A33C8A153CCCD7EFCF49D20B1544D9F4817E94EBFB0CD_1568909276831_Screenshot+from+2019-09-19+19-01-19.png)\n",
    "\n",
    "----------\n",
    "![](https://paper-attachments.dropbox.com/s_2941BE57FDEFC63DC92A33C8A153CCCD7EFCF49D20B1544D9F4817E94EBFB0CD_1568909283794_Screenshot+from+2019-09-19+19-01-42.png)\n",
    "\n",
    "----------\n",
    "![](https://paper-attachments.dropbox.com/s_2941BE57FDEFC63DC92A33C8A153CCCD7EFCF49D20B1544D9F4817E94EBFB0CD_1568909289340_Screenshot+from+2019-09-19+19-02-50.png)\n",
    "\n",
    "----------\n",
    "![](https://paper-attachments.dropbox.com/s_2941BE57FDEFC63DC92A33C8A153CCCD7EFCF49D20B1544D9F4817E94EBFB0CD_1568909296216_Screenshot+from+2019-09-19+19-04-30.png)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.datasets import load_iris\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.tree import DecisionTreeClassifier, export_graphviz\n",
    "from graphviz import Source\n",
    "from IPython.display import display, SVG"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Decision Trees\n",
    "\n",
    "Simple decision tree can be constructed using rule: make a split which **reduces entropy** the most. In a well-constructed tree, each question will cut the number of options by approximately half, very quickly narrowing the options even among a large number of classes.\n",
    "\n",
    "![](https://paper-attachments.dropbox.com/s_4C6E1420D930BE100F0F1313D7A90868E9FB8CAFCB77E86AC4D0FB805D8FC787_1569515384629_image.png)\n",
    "\n",
    "Couple facts about decision trees:\n",
    "\n",
    "- Alternatively you could use Gini impurity as a split criteria, which is defined as $G_i = 1 - \\sum_{k=1}^n p_{i,k}^2$ where $p_{i,k}$ is the ratio of class k instances among the training instances in the ith node.\n",
    "- Finding the optimal tree is known to be an NP-Complete problem $O(\\exp (m))$.\n",
    "- Decision Trees are very sensitive to small variations in the training data.\n",
    "- Decision Trees can easily over-fit if there is high number of columns! \n",
    "\n",
    "### Decision tree for iris dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load dataset\n",
    "iris = load_iris()\n",
    "df = pd.DataFrame(iris.data, columns = iris.feature_names)\n",
    "df['class'] = iris.target_names[iris.target]\n",
    "\n",
    "# Train/test mask\n",
    "np.random.seed(42)\n",
    "mask = np.random.rand(df.shape[0]) < 0.7"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's fit entropy based tree on iris dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------------\n",
      "Tree for max_dept = 1\n",
      "\n",
      "Correctly identified on train set - 70.48%, on test set - 57.78%\n"
     ]
    },
    {
     "data": {
      "image/svg+xml": [
       "<svg height=\"186pt\" viewBox=\"0.00 0.00 264.41 186.00\" width=\"264pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g class=\"graph\" id=\"graph0\" transform=\"scale(1 1) rotate(0) translate(4 182)\">\n",
       "<title>Tree</title>\n",
       "<polygon fill=\"white\" points=\"-4,4 -4,-182 260.41,-182 260.41,4 -4,4\" stroke=\"transparent\"/>\n",
       "<!-- 0 -->\n",
       "<g class=\"node\" id=\"node1\">\n",
       "<title>0</title>\n",
       "<polygon fill=\"#fef8f4\" points=\"203.69,-178 44.85,-178 44.85,-100 203.69,-100 203.69,-178\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"124.27\" y=\"-162.8\">petal length (cm) &lt;= 2.45</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"124.27\" y=\"-148.8\">entropy = 1.579</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"124.27\" y=\"-134.8\">samples = 105</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"124.27\" y=\"-120.8\">value = [39, 31, 35]</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"124.27\" y=\"-106.8\">class = 0 - setosa</text>\n",
       "</g>\n",
       "<!-- 1 -->\n",
       "<g class=\"node\" id=\"node2\">\n",
       "<title>1</title>\n",
       "<polygon fill=\"#e58139\" points=\"112.31,-64 0.23,-64 0.23,0 112.31,0 112.31,-64\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"56.27\" y=\"-48.8\">entropy = 0.0</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"56.27\" y=\"-34.8\">samples = 39</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"56.27\" y=\"-20.8\">value = [39, 0, 0]</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"56.27\" y=\"-6.8\">class = 0 - setosa</text>\n",
       "</g>\n",
       "<!-- 0&#45;&gt;1 -->\n",
       "<g class=\"edge\" id=\"edge1\">\n",
       "<title>0-&gt;1</title>\n",
       "<path d=\"M99.53,-99.8C93.83,-91 87.76,-81.63 82.02,-72.76\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"84.79,-70.61 76.42,-64.12 78.92,-74.41 84.79,-70.61\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"71.19\" y=\"-84.36\">True</text>\n",
       "</g>\n",
       "<!-- 2 -->\n",
       "<g class=\"node\" id=\"node3\">\n",
       "<title>2</title>\n",
       "<polygon fill=\"#f1e8fc\" points=\"256.55,-64 129.98,-64 129.98,0 256.55,0 256.55,-64\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"193.27\" y=\"-48.8\">entropy = 0.997</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"193.27\" y=\"-34.8\">samples = 66</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"193.27\" y=\"-20.8\">value = [0, 31, 35]</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"193.27\" y=\"-6.8\">class = 2 - virginica</text>\n",
       "</g>\n",
       "<!-- 0&#45;&gt;2 -->\n",
       "<g class=\"edge\" id=\"edge2\">\n",
       "<title>0-&gt;2</title>\n",
       "<path d=\"M149.37,-99.8C155.21,-90.91 161.44,-81.43 167.32,-72.49\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"170.25,-74.4 172.82,-64.12 164.4,-70.55 170.25,-74.4\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"177.89\" y=\"-84.4\">False</text>\n",
       "</g>\n",
       "</g>\n",
       "</svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------------\n",
      "Tree for max_dept = 2\n",
      "\n",
      "Correctly identified on train set - 96.19%, on test set - 95.56%\n"
     ]
    },
    {
     "data": {
      "image/svg+xml": [
       "<svg height=\"300pt\" viewBox=\"0.00 0.00 353.41 300.00\" width=\"353pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g class=\"graph\" id=\"graph0\" transform=\"scale(1 1) rotate(0) translate(4 296)\">\n",
       "<title>Tree</title>\n",
       "<polygon fill=\"white\" points=\"-4,4 -4,-296 349.41,-296 349.41,4 -4,4\" stroke=\"transparent\"/>\n",
       "<!-- 0 -->\n",
       "<g class=\"node\" id=\"node1\">\n",
       "<title>0</title>\n",
       "<polygon fill=\"#fef8f4\" points=\"211.69,-292 52.85,-292 52.85,-214 211.69,-214 211.69,-292\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"132.27\" y=\"-276.8\">petal length (cm) &lt;= 2.45</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"132.27\" y=\"-262.8\">entropy = 1.579</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"132.27\" y=\"-248.8\">samples = 105</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"132.27\" y=\"-234.8\">value = [39, 31, 35]</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"132.27\" y=\"-220.8\">class = 0 - setosa</text>\n",
       "</g>\n",
       "<!-- 1 -->\n",
       "<g class=\"node\" id=\"node2\">\n",
       "<title>1</title>\n",
       "<polygon fill=\"#e58139\" points=\"112.31,-171 0.23,-171 0.23,-107 112.31,-107 112.31,-171\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"56.27\" y=\"-155.8\">entropy = 0.0</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"56.27\" y=\"-141.8\">samples = 39</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"56.27\" y=\"-127.8\">value = [39, 0, 0]</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"56.27\" y=\"-113.8\">class = 0 - setosa</text>\n",
       "</g>\n",
       "<!-- 0&#45;&gt;1 -->\n",
       "<g class=\"edge\" id=\"edge1\">\n",
       "<title>0-&gt;1</title>\n",
       "<path d=\"M106.33,-213.77C98.79,-202.66 90.54,-190.51 82.96,-179.33\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"85.82,-177.32 77.31,-171.01 80.03,-181.25 85.82,-177.32\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"72.61\" y=\"-191.36\">True</text>\n",
       "</g>\n",
       "<!-- 2 -->\n",
       "<g class=\"node\" id=\"node3\">\n",
       "<title>2</title>\n",
       "<polygon fill=\"#f1e8fc\" points=\"286.08,-178 130.45,-178 130.45,-100 286.08,-100 286.08,-178\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"208.27\" y=\"-162.8\">petal width (cm) &lt;= 1.75</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"208.27\" y=\"-148.8\">entropy = 0.997</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"208.27\" y=\"-134.8\">samples = 66</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"208.27\" y=\"-120.8\">value = [0, 31, 35]</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"208.27\" y=\"-106.8\">class = 2 - virginica</text>\n",
       "</g>\n",
       "<!-- 0&#45;&gt;2 -->\n",
       "<g class=\"edge\" id=\"edge2\">\n",
       "<title>0-&gt;2</title>\n",
       "<path d=\"M158.21,-213.77C164.14,-205.03 170.51,-195.64 176.65,-186.6\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"179.72,-188.3 182.44,-178.06 173.93,-184.37 179.72,-188.3\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"187.14\" y=\"-198.41\">False</text>\n",
       "</g>\n",
       "<!-- 3 -->\n",
       "<g class=\"node\" id=\"node4\">\n",
       "<title>3</title>\n",
       "<polygon fill=\"#53e891\" points=\"200.52,-64 68.02,-64 68.02,0 200.52,0 200.52,-64\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"134.27\" y=\"-48.8\">entropy = 0.513</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"134.27\" y=\"-34.8\">samples = 35</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"134.27\" y=\"-20.8\">value = [0, 31, 4]</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"134.27\" y=\"-6.8\">class = 1 - versicolor</text>\n",
       "</g>\n",
       "<!-- 2&#45;&gt;3 -->\n",
       "<g class=\"edge\" id=\"edge3\">\n",
       "<title>2-&gt;3</title>\n",
       "<path d=\"M181.34,-99.8C175.08,-90.91 168.4,-81.43 162.1,-72.49\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"164.82,-70.27 156.2,-64.12 159.1,-74.31 164.82,-70.27\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- 4 -->\n",
       "<g class=\"node\" id=\"node5\">\n",
       "<title>4</title>\n",
       "<polygon fill=\"#8139e5\" points=\"345.55,-64 218.98,-64 218.98,0 345.55,0 345.55,-64\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"282.27\" y=\"-48.8\">entropy = 0.0</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"282.27\" y=\"-34.8\">samples = 31</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"282.27\" y=\"-20.8\">value = [0, 0, 31]</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"282.27\" y=\"-6.8\">class = 2 - virginica</text>\n",
       "</g>\n",
       "<!-- 2&#45;&gt;4 -->\n",
       "<g class=\"edge\" id=\"edge4\">\n",
       "<title>2-&gt;4</title>\n",
       "<path d=\"M235.19,-99.8C241.46,-90.91 248.14,-81.43 254.44,-72.49\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"257.44,-74.31 260.34,-64.12 251.72,-70.27 257.44,-74.31\" stroke=\"black\"/>\n",
       "</g>\n",
       "</g>\n",
       "</svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------------\n",
      "Tree for max_dept = 3\n",
      "\n",
      "Correctly identified on train set - 97.14%, on test set - 97.78%\n"
     ]
    },
    {
     "data": {
      "image/svg+xml": [
       "<svg height=\"414pt\" viewBox=\"0.00 0.00 372.52 414.00\" width=\"373pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g class=\"graph\" id=\"graph0\" transform=\"scale(1 1) rotate(0) translate(4 410)\">\n",
       "<title>Tree</title>\n",
       "<polygon fill=\"white\" points=\"-4,4 -4,-410 368.52,-410 368.52,4 -4,4\" stroke=\"transparent\"/>\n",
       "<!-- 0 -->\n",
       "<g class=\"node\" id=\"node1\">\n",
       "<title>0</title>\n",
       "<polygon fill=\"#fef8f4\" points=\"223.79,-406 64.96,-406 64.96,-328 223.79,-328 223.79,-406\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"144.38\" y=\"-390.8\">petal length (cm) &lt;= 2.45</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"144.38\" y=\"-376.8\">entropy = 1.579</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"144.38\" y=\"-362.8\">samples = 105</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"144.38\" y=\"-348.8\">value = [39, 31, 35]</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"144.38\" y=\"-334.8\">class = 0 - setosa</text>\n",
       "</g>\n",
       "<!-- 1 -->\n",
       "<g class=\"node\" id=\"node2\">\n",
       "<title>1</title>\n",
       "<polygon fill=\"#e58139\" points=\"124.41,-285 12.34,-285 12.34,-221 124.41,-221 124.41,-285\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"68.38\" y=\"-269.8\">entropy = 0.0</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"68.38\" y=\"-255.8\">samples = 39</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"68.38\" y=\"-241.8\">value = [39, 0, 0]</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"68.38\" y=\"-227.8\">class = 0 - setosa</text>\n",
       "</g>\n",
       "<!-- 0&#45;&gt;1 -->\n",
       "<g class=\"edge\" id=\"edge1\">\n",
       "<title>0-&gt;1</title>\n",
       "<path d=\"M118.43,-327.77C110.89,-316.66 102.65,-304.51 95.07,-293.33\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"97.93,-291.32 89.42,-285.01 92.14,-295.25 97.93,-291.32\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"84.72\" y=\"-305.36\">True</text>\n",
       "</g>\n",
       "<!-- 2 -->\n",
       "<g class=\"node\" id=\"node3\">\n",
       "<title>2</title>\n",
       "<polygon fill=\"#f1e8fc\" points=\"298.19,-292 142.56,-292 142.56,-214 298.19,-214 298.19,-292\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"220.38\" y=\"-276.8\">petal width (cm) &lt;= 1.75</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"220.38\" y=\"-262.8\">entropy = 0.997</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"220.38\" y=\"-248.8\">samples = 66</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"220.38\" y=\"-234.8\">value = [0, 31, 35]</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"220.38\" y=\"-220.8\">class = 2 - virginica</text>\n",
       "</g>\n",
       "<!-- 0&#45;&gt;2 -->\n",
       "<g class=\"edge\" id=\"edge2\">\n",
       "<title>0-&gt;2</title>\n",
       "<path d=\"M170.32,-327.77C176.25,-319.03 182.62,-309.64 188.76,-300.6\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"191.83,-302.3 194.55,-292.06 186.04,-298.37 191.83,-302.3\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"199.25\" y=\"-312.41\">False</text>\n",
       "</g>\n",
       "<!-- 3 -->\n",
       "<g class=\"node\" id=\"node4\">\n",
       "<title>3</title>\n",
       "<polygon fill=\"#53e891\" points=\"219.79,-178 60.96,-178 60.96,-100 219.79,-100 219.79,-178\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"140.38\" y=\"-162.8\">petal length (cm) &lt;= 4.95</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"140.38\" y=\"-148.8\">entropy = 0.513</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"140.38\" y=\"-134.8\">samples = 35</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"140.38\" y=\"-120.8\">value = [0, 31, 4]</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"140.38\" y=\"-106.8\">class = 1 - versicolor</text>\n",
       "</g>\n",
       "<!-- 2&#45;&gt;3 -->\n",
       "<g class=\"edge\" id=\"edge3\">\n",
       "<title>2-&gt;3</title>\n",
       "<path d=\"M193.07,-213.77C186.76,-204.94 179.98,-195.45 173.46,-186.32\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"176.22,-184.16 167.56,-178.06 170.52,-188.23 176.22,-184.16\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- 6 -->\n",
       "<g class=\"node\" id=\"node7\">\n",
       "<title>6</title>\n",
       "<polygon fill=\"#8139e5\" points=\"364.66,-171 238.09,-171 238.09,-107 364.66,-107 364.66,-171\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"301.38\" y=\"-155.8\">entropy = 0.0</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"301.38\" y=\"-141.8\">samples = 31</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"301.38\" y=\"-127.8\">value = [0, 0, 31]</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"301.38\" y=\"-113.8\">class = 2 - virginica</text>\n",
       "</g>\n",
       "<!-- 2&#45;&gt;6 -->\n",
       "<g class=\"edge\" id=\"edge6\">\n",
       "<title>2-&gt;6</title>\n",
       "<path d=\"M248.02,-213.77C256.06,-202.66 264.85,-190.51 272.93,-179.33\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"275.92,-181.16 278.95,-171.01 270.25,-177.06 275.92,-181.16\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- 4 -->\n",
       "<g class=\"node\" id=\"node5\">\n",
       "<title>4</title>\n",
       "<polygon fill=\"#40e685\" points=\"132.63,-64 0.12,-64 0.12,0 132.63,0 132.63,-64\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"66.38\" y=\"-48.8\">entropy = 0.211</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"66.38\" y=\"-34.8\">samples = 30</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"66.38\" y=\"-20.8\">value = [0, 29, 1]</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"66.38\" y=\"-6.8\">class = 1 - versicolor</text>\n",
       "</g>\n",
       "<!-- 3&#45;&gt;4 -->\n",
       "<g class=\"edge\" id=\"edge4\">\n",
       "<title>3-&gt;4</title>\n",
       "<path d=\"M113.45,-99.8C107.19,-90.91 100.51,-81.43 94.21,-72.49\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"96.93,-70.27 88.31,-64.12 91.21,-74.31 96.93,-70.27\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- 5 -->\n",
       "<g class=\"node\" id=\"node6\">\n",
       "<title>5</title>\n",
       "<polygon fill=\"#d5bdf6\" points=\"277.66,-64 151.09,-64 151.09,0 277.66,0 277.66,-64\" stroke=\"black\"/>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"214.38\" y=\"-48.8\">entropy = 0.971</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"214.38\" y=\"-34.8\">samples = 5</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"214.38\" y=\"-20.8\">value = [0, 2, 3]</text>\n",
       "<text font-family=\"Times,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"214.38\" y=\"-6.8\">class = 2 - virginica</text>\n",
       "</g>\n",
       "<!-- 3&#45;&gt;5 -->\n",
       "<g class=\"edge\" id=\"edge5\">\n",
       "<title>3-&gt;5</title>\n",
       "<path d=\"M167.3,-99.8C173.56,-90.91 180.24,-81.43 186.55,-72.49\" fill=\"none\" stroke=\"black\"/>\n",
       "<polygon fill=\"black\" points=\"189.55,-74.31 192.45,-64.12 183.82,-70.27 189.55,-74.31\" stroke=\"black\"/>\n",
       "</g>\n",
       "</g>\n",
       "</svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for max_depth in range(1, 4):\n",
    "    print('-' * 70 + '\\nTree for max_dept = {0}\\n'.format(max_depth))\n",
    "    tree = DecisionTreeClassifier(max_depth=max_depth, criterion='entropy')\n",
    "    # Fit on train data\n",
    "    tree.fit(df[mask].drop('class', axis=1), df[mask]['class'])\n",
    "\n",
    "    # Make prediction and evaluate performance\n",
    "    pred = tree.predict(df.drop('class', axis=1))\n",
    "    print('Correctly identified on train set - {0:.02%}, on test set - {1:.02%}'.format(\n",
    "        (pred[mask] == df[mask]['class']).mean(),        # train set\n",
    "        (pred[~mask] == df[~mask]['class']).mean()))     # test set\n",
    "\n",
    "    # Make a nice plot\n",
    "    graph = Source(export_graphviz(tree, out_file=None, filled = True,\n",
    "                                   feature_names=df.drop('class', axis=1).columns,\n",
    "                                   class_names=['0 - setosa', '1 - versicolor', '2 - virginica']))\n",
    "    display(SVG(graph.pipe(format='svg')))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see simple decision tree works quite good for iris dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Larger dataset and overfit example\n",
    "\n",
    "Let's load another legendary dataset containing classification problem. If you are interested in dataset details see [UCI](https://archive.ics.uci.edu/ml/datasets/Breast+Cancer+Wisconsin+%28Diagnostic%29)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean radius</th>\n",
       "      <th>mean texture</th>\n",
       "      <th>mean perimeter</th>\n",
       "      <th>mean area</th>\n",
       "      <th>mean smoothness</th>\n",
       "      <th>mean compactness</th>\n",
       "      <th>mean concavity</th>\n",
       "      <th>mean concave points</th>\n",
       "      <th>mean symmetry</th>\n",
       "      <th>mean fractal dimension</th>\n",
       "      <th>...</th>\n",
       "      <th>worst radius</th>\n",
       "      <th>worst texture</th>\n",
       "      <th>worst perimeter</th>\n",
       "      <th>worst area</th>\n",
       "      <th>worst smoothness</th>\n",
       "      <th>worst compactness</th>\n",
       "      <th>worst concavity</th>\n",
       "      <th>worst concave points</th>\n",
       "      <th>worst symmetry</th>\n",
       "      <th>worst fractal dimension</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>14.127292</td>\n",
       "      <td>19.289649</td>\n",
       "      <td>91.969033</td>\n",
       "      <td>654.889104</td>\n",
       "      <td>0.096360</td>\n",
       "      <td>0.104341</td>\n",
       "      <td>0.088799</td>\n",
       "      <td>0.048919</td>\n",
       "      <td>0.181162</td>\n",
       "      <td>0.062798</td>\n",
       "      <td>...</td>\n",
       "      <td>16.269190</td>\n",
       "      <td>25.677223</td>\n",
       "      <td>107.261213</td>\n",
       "      <td>880.583128</td>\n",
       "      <td>0.132369</td>\n",
       "      <td>0.254265</td>\n",
       "      <td>0.272188</td>\n",
       "      <td>0.114606</td>\n",
       "      <td>0.290076</td>\n",
       "      <td>0.083946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>3.524049</td>\n",
       "      <td>4.301036</td>\n",
       "      <td>24.298981</td>\n",
       "      <td>351.914129</td>\n",
       "      <td>0.014064</td>\n",
       "      <td>0.052813</td>\n",
       "      <td>0.079720</td>\n",
       "      <td>0.038803</td>\n",
       "      <td>0.027414</td>\n",
       "      <td>0.007060</td>\n",
       "      <td>...</td>\n",
       "      <td>4.833242</td>\n",
       "      <td>6.146258</td>\n",
       "      <td>33.602542</td>\n",
       "      <td>569.356993</td>\n",
       "      <td>0.022832</td>\n",
       "      <td>0.157336</td>\n",
       "      <td>0.208624</td>\n",
       "      <td>0.065732</td>\n",
       "      <td>0.061867</td>\n",
       "      <td>0.018061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>6.981000</td>\n",
       "      <td>9.710000</td>\n",
       "      <td>43.790000</td>\n",
       "      <td>143.500000</td>\n",
       "      <td>0.052630</td>\n",
       "      <td>0.019380</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.106000</td>\n",
       "      <td>0.049960</td>\n",
       "      <td>...</td>\n",
       "      <td>7.930000</td>\n",
       "      <td>12.020000</td>\n",
       "      <td>50.410000</td>\n",
       "      <td>185.200000</td>\n",
       "      <td>0.071170</td>\n",
       "      <td>0.027290</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.156500</td>\n",
       "      <td>0.055040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>11.700000</td>\n",
       "      <td>16.170000</td>\n",
       "      <td>75.170000</td>\n",
       "      <td>420.300000</td>\n",
       "      <td>0.086370</td>\n",
       "      <td>0.064920</td>\n",
       "      <td>0.029560</td>\n",
       "      <td>0.020310</td>\n",
       "      <td>0.161900</td>\n",
       "      <td>0.057700</td>\n",
       "      <td>...</td>\n",
       "      <td>13.010000</td>\n",
       "      <td>21.080000</td>\n",
       "      <td>84.110000</td>\n",
       "      <td>515.300000</td>\n",
       "      <td>0.116600</td>\n",
       "      <td>0.147200</td>\n",
       "      <td>0.114500</td>\n",
       "      <td>0.064930</td>\n",
       "      <td>0.250400</td>\n",
       "      <td>0.071460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>13.370000</td>\n",
       "      <td>18.840000</td>\n",
       "      <td>86.240000</td>\n",
       "      <td>551.100000</td>\n",
       "      <td>0.095870</td>\n",
       "      <td>0.092630</td>\n",
       "      <td>0.061540</td>\n",
       "      <td>0.033500</td>\n",
       "      <td>0.179200</td>\n",
       "      <td>0.061540</td>\n",
       "      <td>...</td>\n",
       "      <td>14.970000</td>\n",
       "      <td>25.410000</td>\n",
       "      <td>97.660000</td>\n",
       "      <td>686.500000</td>\n",
       "      <td>0.131300</td>\n",
       "      <td>0.211900</td>\n",
       "      <td>0.226700</td>\n",
       "      <td>0.099930</td>\n",
       "      <td>0.282200</td>\n",
       "      <td>0.080040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>15.780000</td>\n",
       "      <td>21.800000</td>\n",
       "      <td>104.100000</td>\n",
       "      <td>782.700000</td>\n",
       "      <td>0.105300</td>\n",
       "      <td>0.130400</td>\n",
       "      <td>0.130700</td>\n",
       "      <td>0.074000</td>\n",
       "      <td>0.195700</td>\n",
       "      <td>0.066120</td>\n",
       "      <td>...</td>\n",
       "      <td>18.790000</td>\n",
       "      <td>29.720000</td>\n",
       "      <td>125.400000</td>\n",
       "      <td>1084.000000</td>\n",
       "      <td>0.146000</td>\n",
       "      <td>0.339100</td>\n",
       "      <td>0.382900</td>\n",
       "      <td>0.161400</td>\n",
       "      <td>0.317900</td>\n",
       "      <td>0.092080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>28.110000</td>\n",
       "      <td>39.280000</td>\n",
       "      <td>188.500000</td>\n",
       "      <td>2501.000000</td>\n",
       "      <td>0.163400</td>\n",
       "      <td>0.345400</td>\n",
       "      <td>0.426800</td>\n",
       "      <td>0.201200</td>\n",
       "      <td>0.304000</td>\n",
       "      <td>0.097440</td>\n",
       "      <td>...</td>\n",
       "      <td>36.040000</td>\n",
       "      <td>49.540000</td>\n",
       "      <td>251.200000</td>\n",
       "      <td>4254.000000</td>\n",
       "      <td>0.222600</td>\n",
       "      <td>1.058000</td>\n",
       "      <td>1.252000</td>\n",
       "      <td>0.291000</td>\n",
       "      <td>0.663800</td>\n",
       "      <td>0.207500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       mean radius  mean texture  mean perimeter    mean area  \\\n",
       "count   569.000000    569.000000      569.000000   569.000000   \n",
       "mean     14.127292     19.289649       91.969033   654.889104   \n",
       "std       3.524049      4.301036       24.298981   351.914129   \n",
       "min       6.981000      9.710000       43.790000   143.500000   \n",
       "25%      11.700000     16.170000       75.170000   420.300000   \n",
       "50%      13.370000     18.840000       86.240000   551.100000   \n",
       "75%      15.780000     21.800000      104.100000   782.700000   \n",
       "max      28.110000     39.280000      188.500000  2501.000000   \n",
       "\n",
       "       mean smoothness  mean compactness  mean concavity  mean concave points  \\\n",
       "count       569.000000        569.000000      569.000000           569.000000   \n",
       "mean          0.096360          0.104341        0.088799             0.048919   \n",
       "std           0.014064          0.052813        0.079720             0.038803   \n",
       "min           0.052630          0.019380        0.000000             0.000000   \n",
       "25%           0.086370          0.064920        0.029560             0.020310   \n",
       "50%           0.095870          0.092630        0.061540             0.033500   \n",
       "75%           0.105300          0.130400        0.130700             0.074000   \n",
       "max           0.163400          0.345400        0.426800             0.201200   \n",
       "\n",
       "       mean symmetry  mean fractal dimension  ...  worst radius  \\\n",
       "count     569.000000              569.000000  ...    569.000000   \n",
       "mean        0.181162                0.062798  ...     16.269190   \n",
       "std         0.027414                0.007060  ...      4.833242   \n",
       "min         0.106000                0.049960  ...      7.930000   \n",
       "25%         0.161900                0.057700  ...     13.010000   \n",
       "50%         0.179200                0.061540  ...     14.970000   \n",
       "75%         0.195700                0.066120  ...     18.790000   \n",
       "max         0.304000                0.097440  ...     36.040000   \n",
       "\n",
       "       worst texture  worst perimeter   worst area  worst smoothness  \\\n",
       "count     569.000000       569.000000   569.000000        569.000000   \n",
       "mean       25.677223       107.261213   880.583128          0.132369   \n",
       "std         6.146258        33.602542   569.356993          0.022832   \n",
       "min        12.020000        50.410000   185.200000          0.071170   \n",
       "25%        21.080000        84.110000   515.300000          0.116600   \n",
       "50%        25.410000        97.660000   686.500000          0.131300   \n",
       "75%        29.720000       125.400000  1084.000000          0.146000   \n",
       "max        49.540000       251.200000  4254.000000          0.222600   \n",
       "\n",
       "       worst compactness  worst concavity  worst concave points  \\\n",
       "count         569.000000       569.000000            569.000000   \n",
       "mean            0.254265         0.272188              0.114606   \n",
       "std             0.157336         0.208624              0.065732   \n",
       "min             0.027290         0.000000              0.000000   \n",
       "25%             0.147200         0.114500              0.064930   \n",
       "50%             0.211900         0.226700              0.099930   \n",
       "75%             0.339100         0.382900              0.161400   \n",
       "max             1.058000         1.252000              0.291000   \n",
       "\n",
       "       worst symmetry  worst fractal dimension  \n",
       "count      569.000000               569.000000  \n",
       "mean         0.290076                 0.083946  \n",
       "std          0.061867                 0.018061  \n",
       "min          0.156500                 0.055040  \n",
       "25%          0.250400                 0.071460  \n",
       "50%          0.282200                 0.080040  \n",
       "75%          0.317900                 0.092080  \n",
       "max          0.663800                 0.207500  \n",
       "\n",
       "[8 rows x 30 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.datasets import load_breast_cancer\n",
    "\n",
    "# Load dataset\n",
    "cancer = load_breast_cancer()\n",
    "df = pd.DataFrame(cancer.data, columns = cancer.feature_names)\n",
    "df['class'] = cancer.target_names[cancer.target]\n",
    "\n",
    "# Train/test mask\n",
    "np.random.seed(42)\n",
    "mask = np.random.rand(df.shape[0]) < 0.8\n",
    "\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "class\n",
       "benign       357\n",
       "malignant    212\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('class').size()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As before we will fit multiple trees with different max_depth's. This time let's plot performance on train and test sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f8c232900b8>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "L = []\n",
    "for max_depth in range(1, 10):\n",
    "    tree = DecisionTreeClassifier(max_depth=max_depth, criterion='entropy', random_state=42)\n",
    "    # Fit on train data\n",
    "    tree.fit(df[mask].drop('class', axis=1), df[mask]['class'])\n",
    "\n",
    "    # Make prediction and evaluate performance\n",
    "    pred = tree.predict(df.drop('class', axis=1))\n",
    "    L.append([(pred[mask] == df[mask]['class']).mean(),        # train set\n",
    "              (pred[~mask] == df[~mask]['class']).mean()])     # test set\n",
    "    \n",
    "pd.DataFrame(L, columns=['train', 'test']).plot(\n",
    "    title='Accuracy for different max_depth values')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that as the depth increases, we tend to get very strangely shaped classification regions. Such overfitting turns out to be a general property of decision trees: it is very easy to go too deep in the tree, and thus to fit details of the particular data rather than the overall properties of the distributions they are drawn from. Another way to see this overfitting is to look at models trained on different subsets of the data.\n",
    "\n",
    "How can we prevent it in this case?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Ensembles\n",
    "\n",
    "The notion that multiple overfitting estimators can be combined to reduce the effect of overfitting is what underlies an ensemble method called bagging. Bagging makes use of an ensemble (a grab bag, perhaps) of parallel estimators, each of which overfits the data, and averages the results to find a better classification. An ensemble of randomized decision trees is known as a random forest.\n",
    "\n",
    "![](https://paper-attachments.dropbox.com/s_4C6E1420D930BE100F0F1313D7A90868E9FB8CAFCB77E86AC4D0FB805D8FC787_1569583935206_image.png)\n",
    "\n",
    "![](https://paper-attachments.dropbox.com/s_4C6E1420D930BE100F0F1313D7A90868E9FB8CAFCB77E86AC4D0FB805D8FC787_1569583987571_image.png)\n",
    "\n",
    "Ensemble methods work best when the predictors are as independent from one another as possible. One way to get diverse classifiers is to train them using very different algorithms. This increases the chance that they will make very different types of errors, improving the ensemble’s accuracy.\n",
    "\n",
    "Ensemble methods lead to similar bias but a lower variance.\n",
    "\n",
    "![](http://www.stokastik.in/wp-content/uploads/2016/07/Bias_Variance.jpg)\n",
    "\n",
    "### Random forests\n",
    "\n",
    "You can make multiple trees by choosing sub-sample of features (usually $\\sqrt{m}$) and taking bootstrapped samples. Then just let trees vote for decision.\n",
    "\n",
    "![](https://victorzhou.com/media/random-forest-post/random-forest.png)\n",
    "\n",
    "Hard voting averages predictions, soft voting averages predicted probabilities instead. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import BaggingClassifier\n",
    "\n",
    "# Defining the base estimator\n",
    "base = DecisionTreeClassifier(max_depth=5, splitter='best',\n",
    "                    max_features='sqrt', criterion='entropy')\n",
    "\n",
    "# Create Random Forest \n",
    "ensemble = BaggingClassifier(base_estimator=base, n_estimators=1000,\n",
    "                             bootstrap=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Correctly identified on train set - 100.00%, on test set - 93.70%\n",
      "\n",
      "CPU times: user 907 ms, sys: 3.23 ms, total: 910 ms\n",
      "Wall time: 910 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "ensemble.fit(df[mask].drop('class', axis=1), df[mask]['class'])\n",
    "pred = tree.predict(df.drop('class', axis=1))\n",
    "\n",
    "print('Correctly identified on train set - {0:.02%}, on test set - {1:.02%}\\n'.format(\n",
    "    (pred[mask] == df[mask]['class']).mean(),        # train set\n",
    "    (pred[~mask] == df[~mask]['class']).mean()))     # test set"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will note use this implememtation, this is just for illustration! Instead we will use `RandomForestClassifier` directly.\n",
    "\n",
    "**Note:** there are other variations of boosted trees, for example ExtraTrees can be constructed by setting splitter to random and bootstrap to False. ExtraTrees are usually faster to train, but Random Forests are more well known, just try them both and see which works better for problem at hand."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task\n",
    "\n",
    "Try to use `sklearn.ensemble.RandomForestClassifier` for iris dataset. Use sklearn implementation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load dataset\n",
    "iris = load_iris()\n",
    "df = pd.DataFrame(iris.data, columns = iris.feature_names)\n",
    "df['class'] = iris.target_names[iris.target]\n",
    "\n",
    "# Train/test mask\n",
    "np.random.seed(42)\n",
    "mask = np.random.rand(df.shape[0]) < 0.7"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Answer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['sepal area'] = df['sepal length (cm)'] * df['sepal width (cm)']\n",
    "df['petal area'] = df['petal length (cm)'] * df['petal width (cm)']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "rf = RandomForestClassifier(n_estimators=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
       "                       max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, n_estimators=100,\n",
       "                       n_jobs=None, oob_score=False, random_state=None,\n",
       "                       verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf.fit(df[mask].drop('class', axis=1), df[mask]['class'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred = rf.predict(df[~mask].drop('class', axis=1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy 95.56%\n"
     ]
    }
   ],
   "source": [
    "acc = np.mean(pred == df[~mask]['class'])\n",
    "print(f'Accuracy {acc:.02%}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Confusion matrix\n",
    "\n",
    "Thisis a neat way to see where your model is making mistakes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>setosa</th>\n",
       "      <th>versicolor</th>\n",
       "      <th>virginica</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>setosa</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>versicolor</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>virginica</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            setosa  versicolor  virginica\n",
       "setosa          11           0          0\n",
       "versicolor       0          18          1\n",
       "virginica        0           1         14"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(confusion_matrix(df[~mask]['class'], pred),\n",
    "             columns=rf.classes_, index=rf.classes_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature importance\n",
    "\n",
    "It is easy to check which features are most important - ones which were used in most trees or/and gave highest information gain overall."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>sepal length (cm)</td>\n",
       "      <td>0.092149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>sepal width (cm)</td>\n",
       "      <td>0.033990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>petal length (cm)</td>\n",
       "      <td>0.231749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>petal width (cm)</td>\n",
       "      <td>0.275963</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>sepal area</td>\n",
       "      <td>0.032594</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>petal area</td>\n",
       "      <td>0.333554</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          0\n",
       "sepal length (cm)  0.092149\n",
       "sepal width (cm)   0.033990\n",
       "petal length (cm)  0.231749\n",
       "petal width (cm)   0.275963\n",
       "sepal area         0.032594\n",
       "petal area         0.333554"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(rf.feature_importances_,\n",
    "             index=df.drop('class', axis=1).columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A note on decision boundaries"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's generate some data blobs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n",
       "                       criterion='gini', max_depth=2, max_features='auto',\n",
       "                       max_leaf_nodes=None, max_samples=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, n_estimators=500,\n",
       "                       n_jobs=None, oob_score=False, random_state=None,\n",
       "                       verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.datasets import make_blobs\n",
    "\n",
    "X, y = make_blobs(n_samples=300, centers=4,\n",
    "                  random_state=0, cluster_std=1.0)\n",
    "\n",
    "tree = DecisionTreeClassifier()\n",
    "tree.fit(X, y)\n",
    "\n",
    "rf = RandomForestClassifier(n_estimators=500, max_depth=2)\n",
    "rf.fit(X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Look at overfitting here, make decision boundary plots."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x576 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "mesh = np.transpose([np.tile(np.linspace(-5, 5, 100), 100),\n",
    "                     np.repeat(np.linspace(-3, 12, 100), 100)])\n",
    "\n",
    "plt.figure(figsize=(16, 8))\n",
    "plt.subplot(121)\n",
    "plt.scatter(mesh[:, 0], mesh[:, 1], c=tree.predict(mesh), marker='s', s=20, cmap='inferno')\n",
    "plt.scatter(X[:, 0], X[:, 1], c=y, cmap='coolwarm')\n",
    "plt.title('Simple decision tree')\n",
    "plt.subplot(122)\n",
    "plt.scatter(mesh[:, 0], mesh[:, 1], c=rf.predict(mesh), marker='s', s=20, cmap='inferno')\n",
    "plt.scatter(X[:, 0], X[:, 1], c=y, cmap='coolwarm')\n",
    "plt.title('Random forest')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By the way, RF with standard param set will not look so nice."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## MNIST\n",
    "\n",
    "The [MNIST database](http://yann.lecun.com/exdb/mnist/) contains handwritten digits and has a training set of 60,000 examples, and a test set of 10,000 examples. It is legendary dataset crated by LeCun group in 1999."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x216 with 30 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from tensorflow import keras\n",
    "\n",
    "(X_train, y_train), (X_test, y_test) = keras.datasets.mnist.load_data()\n",
    "# Normalize\n",
    "X_train = X_train / 255\n",
    "X_test = X_test / 255\n",
    "\n",
    "plt.figure(figsize=(10, 3))\n",
    "for i in range(30):\n",
    "    plt.subplot(3, 10, i + 1)\n",
    "    plt.imshow(X_train[i], cmap='gray')\n",
    "    plt.axis('off')\n",
    "plt.show()\n",
    "\n",
    "X_train = X_train.reshape((60000, 28*28))\n",
    "X_test = X_test.reshape((10000, 28*28))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = RandomForestClassifier()\n",
    "model.fit(X_train, y_train)\n",
    "pred = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9698"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "accuracy_score(y_test, pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row0_col0 {\n",
       "            background-color:  #023858;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row0_col1 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row0_col2 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row0_col3 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row0_col4 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row0_col5 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row0_col6 {\n",
       "            background-color:  #fef6fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row0_col7 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row0_col8 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row0_col9 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row1_col0 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row1_col1 {\n",
       "            background-color:  #023858;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row1_col2 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row1_col3 {\n",
       "            background-color:  #fef6fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row1_col4 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row1_col5 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row1_col6 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row1_col7 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row1_col8 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row1_col9 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row2_col0 {\n",
       "            background-color:  #fef6fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row2_col1 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row2_col2 {\n",
       "            background-color:  #023858;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row2_col3 {\n",
       "            background-color:  #fef6fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row2_col4 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row2_col5 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row2_col6 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row2_col7 {\n",
       "            background-color:  #fef6fa;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row2_col8 {\n",
       "            background-color:  #fef6fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row2_col9 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row3_col0 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row3_col1 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row3_col2 {\n",
       "            background-color:  #fdf5fa;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row3_col3 {\n",
       "            background-color:  #023858;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row3_col4 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row3_col5 {\n",
       "            background-color:  #fef6fa;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row3_col6 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row3_col7 {\n",
       "            background-color:  #fef6fa;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row3_col8 {\n",
       "            background-color:  #fef6fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row3_col9 {\n",
       "            background-color:  #fef6fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row4_col0 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row4_col1 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row4_col2 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row4_col3 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row4_col4 {\n",
       "            background-color:  #023858;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row4_col5 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row4_col6 {\n",
       "            background-color:  #fef6fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row4_col7 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row4_col8 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row4_col9 {\n",
       "            background-color:  #fdf5fa;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row5_col0 {\n",
       "            background-color:  #fef6fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row5_col1 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row5_col2 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row5_col3 {\n",
       "            background-color:  #fdf5fa;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row5_col4 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row5_col5 {\n",
       "            background-color:  #023858;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row5_col6 {\n",
       "            background-color:  #fef6fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row5_col7 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row5_col8 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row5_col9 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row6_col0 {\n",
       "            background-color:  #fef6fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row6_col1 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row6_col2 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row6_col3 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row6_col4 {\n",
       "            background-color:  #fef6fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row6_col5 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row6_col6 {\n",
       "            background-color:  #023858;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row6_col7 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row6_col8 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row6_col9 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row7_col0 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row7_col1 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row7_col2 {\n",
       "            background-color:  #fdf5fa;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row7_col3 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row7_col4 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row7_col5 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row7_col6 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row7_col7 {\n",
       "            background-color:  #023858;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row7_col8 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row7_col9 {\n",
       "            background-color:  #fef6fa;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row8_col0 {\n",
       "            background-color:  #fef6fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row8_col1 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row8_col2 {\n",
       "            background-color:  #fef6fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row8_col3 {\n",
       "            background-color:  #fef6fa;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row8_col4 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row8_col5 {\n",
       "            background-color:  #fef6fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row8_col6 {\n",
       "            background-color:  #fef6fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row8_col7 {\n",
       "            background-color:  #fef6fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row8_col8 {\n",
       "            background-color:  #023858;\n",
       "            color:  #f1f1f1;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row8_col9 {\n",
       "            background-color:  #fef6fa;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row9_col0 {\n",
       "            background-color:  #fef6fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row9_col1 {\n",
       "            background-color:  #fef6fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row9_col2 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row9_col3 {\n",
       "            background-color:  #fef6fa;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row9_col4 {\n",
       "            background-color:  #fef6fa;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row9_col5 {\n",
       "            background-color:  #fef6fa;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row9_col6 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row9_col7 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row9_col8 {\n",
       "            background-color:  #fff7fb;\n",
       "            color:  #000000;\n",
       "        }    #T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row9_col9 {\n",
       "            background-color:  #023858;\n",
       "            color:  #f1f1f1;\n",
       "        }</style><table id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >0</th>        <th class=\"col_heading level0 col1\" >1</th>        <th class=\"col_heading level0 col2\" >2</th>        <th class=\"col_heading level0 col3\" >3</th>        <th class=\"col_heading level0 col4\" >4</th>        <th class=\"col_heading level0 col5\" >5</th>        <th class=\"col_heading level0 col6\" >6</th>        <th class=\"col_heading level0 col7\" >7</th>        <th class=\"col_heading level0 col8\" >8</th>        <th class=\"col_heading level0 col9\" >9</th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row0_col0\" class=\"data row0 col0\" >969</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row0_col1\" class=\"data row0 col1\" >0</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row0_col2\" class=\"data row0 col2\" >0</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row0_col3\" class=\"data row0 col3\" >0</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row0_col4\" class=\"data row0 col4\" >0</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row0_col5\" class=\"data row0 col5\" >3</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row0_col6\" class=\"data row0 col6\" >4</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row0_col7\" class=\"data row0 col7\" >1</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row0_col8\" class=\"data row0 col8\" >3</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row0_col9\" class=\"data row0 col9\" >0</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row1_col0\" class=\"data row1 col0\" >0</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row1_col1\" class=\"data row1 col1\" >1124</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row1_col2\" class=\"data row1 col2\" >1</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row1_col3\" class=\"data row1 col3\" >4</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row1_col4\" class=\"data row1 col4\" >1</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row1_col5\" class=\"data row1 col5\" >1</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row1_col6\" class=\"data row1 col6\" >2</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row1_col7\" class=\"data row1 col7\" >1</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row1_col8\" class=\"data row1 col8\" >1</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row1_col9\" class=\"data row1 col9\" >0</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row2_col0\" class=\"data row2 col0\" >6</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row2_col1\" class=\"data row2 col1\" >0</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row2_col2\" class=\"data row2 col2\" >1000</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row2_col3\" class=\"data row2 col3\" >6</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row2_col4\" class=\"data row2 col4\" >3</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row2_col5\" class=\"data row2 col5\" >0</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row2_col6\" class=\"data row2 col6\" >3</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row2_col7\" class=\"data row2 col7\" >8</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row2_col8\" class=\"data row2 col8\" >6</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row2_col9\" class=\"data row2 col9\" >0</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row3_col0\" class=\"data row3 col0\" >0</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row3_col1\" class=\"data row3 col1\" >0</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row3_col2\" class=\"data row3 col2\" >13</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row3_col3\" class=\"data row3 col3\" >967</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row3_col4\" class=\"data row3 col4\" >0</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row3_col5\" class=\"data row3 col5\" >9</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row3_col6\" class=\"data row3 col6\" >0</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row3_col7\" class=\"data row3 col7\" >9</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row3_col8\" class=\"data row3 col8\" >8</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row3_col9\" class=\"data row3 col9\" >4</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row4_col0\" class=\"data row4 col0\" >1</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row4_col1\" class=\"data row4 col1\" >0</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row4_col2\" class=\"data row4 col2\" >0</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row4_col3\" class=\"data row4 col3\" >0</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row4_col4\" class=\"data row4 col4\" >955</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row4_col5\" class=\"data row4 col5\" >0</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row4_col6\" class=\"data row4 col6\" >6</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row4_col7\" class=\"data row4 col7\" >0</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row4_col8\" class=\"data row4 col8\" >3</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row4_col9\" class=\"data row4 col9\" >17</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row5_col0\" class=\"data row5 col0\" >4</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row5_col1\" class=\"data row5 col1\" >1</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row5_col2\" class=\"data row5 col2\" >0</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row5_col3\" class=\"data row5 col3\" >14</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row5_col4\" class=\"data row5 col4\" >1</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row5_col5\" class=\"data row5 col5\" >858</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row5_col6\" class=\"data row5 col6\" >6</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row5_col7\" class=\"data row5 col7\" >1</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row5_col8\" class=\"data row5 col8\" >4</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row5_col9\" class=\"data row5 col9\" >3</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row6_col0\" class=\"data row6 col0\" >5</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row6_col1\" class=\"data row6 col1\" >3</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row6_col2\" class=\"data row6 col2\" >0</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row6_col3\" class=\"data row6 col3\" >1</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row6_col4\" class=\"data row6 col4\" >4</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row6_col5\" class=\"data row6 col5\" >3</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row6_col6\" class=\"data row6 col6\" >940</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row6_col7\" class=\"data row6 col7\" >0</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row6_col8\" class=\"data row6 col8\" >2</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row6_col9\" class=\"data row6 col9\" >0</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row7_col0\" class=\"data row7 col0\" >1</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row7_col1\" class=\"data row7 col1\" >3</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row7_col2\" class=\"data row7 col2\" >18</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row7_col3\" class=\"data row7 col3\" >2</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row7_col4\" class=\"data row7 col4\" >0</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row7_col5\" class=\"data row7 col5\" >0</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row7_col6\" class=\"data row7 col6\" >0</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row7_col7\" class=\"data row7 col7\" >993</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row7_col8\" class=\"data row7 col8\" >1</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row7_col9\" class=\"data row7 col9\" >10</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14level0_row8\" class=\"row_heading level0 row8\" >8</th>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row8_col0\" class=\"data row8 col0\" >4</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row8_col1\" class=\"data row8 col1\" >0</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row8_col2\" class=\"data row8 col2\" >5</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row8_col3\" class=\"data row8 col3\" >10</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row8_col4\" class=\"data row8 col4\" >2</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row8_col5\" class=\"data row8 col5\" >5</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row8_col6\" class=\"data row8 col6\" >5</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row8_col7\" class=\"data row8 col7\" >4</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row8_col8\" class=\"data row8 col8\" >929</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row8_col9\" class=\"data row8 col9\" >10</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14level0_row9\" class=\"row_heading level0 row9\" >9</th>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row9_col0\" class=\"data row9 col0\" >6</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row9_col1\" class=\"data row9 col1\" >6</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row9_col2\" class=\"data row9 col2\" >1</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row9_col3\" class=\"data row9 col3\" >9</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row9_col4\" class=\"data row9 col4\" >11</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row9_col5\" class=\"data row9 col5\" >7</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row9_col6\" class=\"data row9 col6\" >0</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row9_col7\" class=\"data row9 col7\" >3</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row9_col8\" class=\"data row9 col8\" >3</td>\n",
       "                        <td id=\"T_4a2bcba4_773e_11ea_b5ce_8c8590b50e14row9_col9\" class=\"data row9 col9\" >963</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x166e0ee50>"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "pd.DataFrame(confusion_matrix(y_test, pred), columns=range(10), index=range(10)).style.background_gradient()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will see that using neural networks we can avoid some of these mistakes, but overall accuracy of RF is quite good even for complex task as this one."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Whats next?\n",
    "\n",
    "There are many variations of Random Forests you can explore, to name a few:\n",
    "- [ExtraTrees](https://scikit-learn.org/stable/modules/ensemble.html#extremely-randomized-trees)\n",
    "- [XGBoost](https://xgboost.readthedocs.io/en/latest/)\n",
    "- [LightGBM](https://lightgbm.readthedocs.io/en/latest/)\n",
    "\n",
    "Up to the day of writing XGboost is still a leading method for tabular problems, but as we will see deep learning will beat them at unstructured data. Basic idea of XGBoost: fit next decision tree on residual errors made by the previous predictor, thus trying to fix them.\n",
    "\n",
    "1. Fit $\\text{tree}_0$ on $X$ and $y_0=y$ and make predictions $y_1$. Set $i=1$.\n",
    "2. Fit $\\text{tree}_i$ to predict residuals $y_{i-1} - y_i$ given $X$ and make predictions $y_{i+1}$.\n",
    "3. Increment $i$ and jump back to step 2.\n",
    "\n",
    "\n",
    "## (Re) Sources:\n",
    "- Claude Shannon “A Mathematical Theory of Communication” 1948 ([link](http://www.math.harvard.edu/~ctm/home/text/others/shannon/entropy/entropy.pdf)).\n",
    "- Nice [video](https://youtu.be/ErfnhcEV1O8) about Entropy \n",
    "- Medium [post](https://towardsdatascience.com/must-know-information-theory-concepts-in-deep-learning-ai-e54a5da9769d) about Entropy\n",
    "- Logistic regression from scratch ([medium post](https://medium.com/@martinpella/logistic-regression-from-scratch-in-python-124c5636b8ac))\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
